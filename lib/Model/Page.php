<?php
/**
 * Page
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statuspage API
 *
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Page Class Doc Comment
 *
 * @category Class
 * @description Get a page
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Page implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Page';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'name' => 'string',
        'page_description' => 'string',
        'headline' => 'string',
        'branding' => 'string',
        'subdomain' => 'string',
        'domain' => 'string',
        'url' => 'string',
        'support_url' => 'string',
        'hidden_from_search' => 'bool',
        'allow_page_subscribers' => 'bool',
        'allow_incident_subscribers' => 'bool',
        'allow_email_subscribers' => 'bool',
        'allow_sms_subscribers' => 'bool',
        'allow_rss_atom_feeds' => 'bool',
        'allow_webhook_subscribers' => 'bool',
        'notifications_from_email' => 'string',
        'notifications_email_footer' => 'string',
        'activity_score' => 'float',
        'twitter_username' => 'string',
        'viewers_must_be_team_members' => 'bool',
        'ip_restrictions' => 'string',
        'city' => 'string',
        'state' => 'string',
        'country' => 'string',
        'time_zone' => 'string',
        'css_body_background_color' => 'string',
        'css_font_color' => 'string',
        'css_light_font_color' => 'string',
        'css_greens' => 'string',
        'css_yellows' => 'string',
        'css_oranges' => 'string',
        'css_blues' => 'string',
        'css_reds' => 'string',
        'css_border_color' => 'string',
        'css_graph_color' => 'string',
        'css_link_color' => 'string',
        'css_no_data' => 'string',
        'favicon_logo' => 'string',
        'transactional_logo' => 'string',
        'hero_cover' => 'string',
        'email_logo' => 'string',
        'twitter_logo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'name' => null,
        'page_description' => null,
        'headline' => null,
        'branding' => null,
        'subdomain' => null,
        'domain' => null,
        'url' => null,
        'support_url' => null,
        'hidden_from_search' => null,
        'allow_page_subscribers' => null,
        'allow_incident_subscribers' => null,
        'allow_email_subscribers' => null,
        'allow_sms_subscribers' => null,
        'allow_rss_atom_feeds' => null,
        'allow_webhook_subscribers' => null,
        'notifications_from_email' => null,
        'notifications_email_footer' => null,
        'activity_score' => 'float',
        'twitter_username' => null,
        'viewers_must_be_team_members' => null,
        'ip_restrictions' => null,
        'city' => null,
        'state' => null,
        'country' => null,
        'time_zone' => null,
        'css_body_background_color' => null,
        'css_font_color' => null,
        'css_light_font_color' => null,
        'css_greens' => null,
        'css_yellows' => null,
        'css_oranges' => null,
        'css_blues' => null,
        'css_reds' => null,
        'css_border_color' => null,
        'css_graph_color' => null,
        'css_link_color' => null,
        'css_no_data' => null,
        'favicon_logo' => null,
        'transactional_logo' => null,
        'hero_cover' => null,
        'email_logo' => null,
        'twitter_logo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'created_at' => false,
		'updated_at' => false,
		'name' => false,
		'page_description' => false,
		'headline' => false,
		'branding' => false,
		'subdomain' => false,
		'domain' => false,
		'url' => false,
		'support_url' => false,
		'hidden_from_search' => false,
		'allow_page_subscribers' => false,
		'allow_incident_subscribers' => false,
		'allow_email_subscribers' => false,
		'allow_sms_subscribers' => false,
		'allow_rss_atom_feeds' => false,
		'allow_webhook_subscribers' => false,
		'notifications_from_email' => false,
		'notifications_email_footer' => false,
		'activity_score' => false,
		'twitter_username' => false,
		'viewers_must_be_team_members' => false,
		'ip_restrictions' => false,
		'city' => false,
		'state' => false,
		'country' => false,
		'time_zone' => false,
		'css_body_background_color' => false,
		'css_font_color' => false,
		'css_light_font_color' => false,
		'css_greens' => false,
		'css_yellows' => false,
		'css_oranges' => false,
		'css_blues' => false,
		'css_reds' => false,
		'css_border_color' => false,
		'css_graph_color' => false,
		'css_link_color' => false,
		'css_no_data' => false,
		'favicon_logo' => false,
		'transactional_logo' => false,
		'hero_cover' => false,
		'email_logo' => false,
		'twitter_logo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'name' => 'name',
        'page_description' => 'page_description',
        'headline' => 'headline',
        'branding' => 'branding',
        'subdomain' => 'subdomain',
        'domain' => 'domain',
        'url' => 'url',
        'support_url' => 'support_url',
        'hidden_from_search' => 'hidden_from_search',
        'allow_page_subscribers' => 'allow_page_subscribers',
        'allow_incident_subscribers' => 'allow_incident_subscribers',
        'allow_email_subscribers' => 'allow_email_subscribers',
        'allow_sms_subscribers' => 'allow_sms_subscribers',
        'allow_rss_atom_feeds' => 'allow_rss_atom_feeds',
        'allow_webhook_subscribers' => 'allow_webhook_subscribers',
        'notifications_from_email' => 'notifications_from_email',
        'notifications_email_footer' => 'notifications_email_footer',
        'activity_score' => 'activity_score',
        'twitter_username' => 'twitter_username',
        'viewers_must_be_team_members' => 'viewers_must_be_team_members',
        'ip_restrictions' => 'ip_restrictions',
        'city' => 'city',
        'state' => 'state',
        'country' => 'country',
        'time_zone' => 'time_zone',
        'css_body_background_color' => 'css_body_background_color',
        'css_font_color' => 'css_font_color',
        'css_light_font_color' => 'css_light_font_color',
        'css_greens' => 'css_greens',
        'css_yellows' => 'css_yellows',
        'css_oranges' => 'css_oranges',
        'css_blues' => 'css_blues',
        'css_reds' => 'css_reds',
        'css_border_color' => 'css_border_color',
        'css_graph_color' => 'css_graph_color',
        'css_link_color' => 'css_link_color',
        'css_no_data' => 'css_no_data',
        'favicon_logo' => 'favicon_logo',
        'transactional_logo' => 'transactional_logo',
        'hero_cover' => 'hero_cover',
        'email_logo' => 'email_logo',
        'twitter_logo' => 'twitter_logo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'name' => 'setName',
        'page_description' => 'setPageDescription',
        'headline' => 'setHeadline',
        'branding' => 'setBranding',
        'subdomain' => 'setSubdomain',
        'domain' => 'setDomain',
        'url' => 'setUrl',
        'support_url' => 'setSupportUrl',
        'hidden_from_search' => 'setHiddenFromSearch',
        'allow_page_subscribers' => 'setAllowPageSubscribers',
        'allow_incident_subscribers' => 'setAllowIncidentSubscribers',
        'allow_email_subscribers' => 'setAllowEmailSubscribers',
        'allow_sms_subscribers' => 'setAllowSmsSubscribers',
        'allow_rss_atom_feeds' => 'setAllowRssAtomFeeds',
        'allow_webhook_subscribers' => 'setAllowWebhookSubscribers',
        'notifications_from_email' => 'setNotificationsFromEmail',
        'notifications_email_footer' => 'setNotificationsEmailFooter',
        'activity_score' => 'setActivityScore',
        'twitter_username' => 'setTwitterUsername',
        'viewers_must_be_team_members' => 'setViewersMustBeTeamMembers',
        'ip_restrictions' => 'setIpRestrictions',
        'city' => 'setCity',
        'state' => 'setState',
        'country' => 'setCountry',
        'time_zone' => 'setTimeZone',
        'css_body_background_color' => 'setCssBodyBackgroundColor',
        'css_font_color' => 'setCssFontColor',
        'css_light_font_color' => 'setCssLightFontColor',
        'css_greens' => 'setCssGreens',
        'css_yellows' => 'setCssYellows',
        'css_oranges' => 'setCssOranges',
        'css_blues' => 'setCssBlues',
        'css_reds' => 'setCssReds',
        'css_border_color' => 'setCssBorderColor',
        'css_graph_color' => 'setCssGraphColor',
        'css_link_color' => 'setCssLinkColor',
        'css_no_data' => 'setCssNoData',
        'favicon_logo' => 'setFaviconLogo',
        'transactional_logo' => 'setTransactionalLogo',
        'hero_cover' => 'setHeroCover',
        'email_logo' => 'setEmailLogo',
        'twitter_logo' => 'setTwitterLogo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'name' => 'getName',
        'page_description' => 'getPageDescription',
        'headline' => 'getHeadline',
        'branding' => 'getBranding',
        'subdomain' => 'getSubdomain',
        'domain' => 'getDomain',
        'url' => 'getUrl',
        'support_url' => 'getSupportUrl',
        'hidden_from_search' => 'getHiddenFromSearch',
        'allow_page_subscribers' => 'getAllowPageSubscribers',
        'allow_incident_subscribers' => 'getAllowIncidentSubscribers',
        'allow_email_subscribers' => 'getAllowEmailSubscribers',
        'allow_sms_subscribers' => 'getAllowSmsSubscribers',
        'allow_rss_atom_feeds' => 'getAllowRssAtomFeeds',
        'allow_webhook_subscribers' => 'getAllowWebhookSubscribers',
        'notifications_from_email' => 'getNotificationsFromEmail',
        'notifications_email_footer' => 'getNotificationsEmailFooter',
        'activity_score' => 'getActivityScore',
        'twitter_username' => 'getTwitterUsername',
        'viewers_must_be_team_members' => 'getViewersMustBeTeamMembers',
        'ip_restrictions' => 'getIpRestrictions',
        'city' => 'getCity',
        'state' => 'getState',
        'country' => 'getCountry',
        'time_zone' => 'getTimeZone',
        'css_body_background_color' => 'getCssBodyBackgroundColor',
        'css_font_color' => 'getCssFontColor',
        'css_light_font_color' => 'getCssLightFontColor',
        'css_greens' => 'getCssGreens',
        'css_yellows' => 'getCssYellows',
        'css_oranges' => 'getCssOranges',
        'css_blues' => 'getCssBlues',
        'css_reds' => 'getCssReds',
        'css_border_color' => 'getCssBorderColor',
        'css_graph_color' => 'getCssGraphColor',
        'css_link_color' => 'getCssLinkColor',
        'css_no_data' => 'getCssNoData',
        'favicon_logo' => 'getFaviconLogo',
        'transactional_logo' => 'getTransactionalLogo',
        'hero_cover' => 'getHeroCover',
        'email_logo' => 'getEmailLogo',
        'twitter_logo' => 'getTwitterLogo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('page_description', $data ?? [], null);
        $this->setIfExists('headline', $data ?? [], null);
        $this->setIfExists('branding', $data ?? [], null);
        $this->setIfExists('subdomain', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('support_url', $data ?? [], null);
        $this->setIfExists('hidden_from_search', $data ?? [], null);
        $this->setIfExists('allow_page_subscribers', $data ?? [], null);
        $this->setIfExists('allow_incident_subscribers', $data ?? [], null);
        $this->setIfExists('allow_email_subscribers', $data ?? [], null);
        $this->setIfExists('allow_sms_subscribers', $data ?? [], null);
        $this->setIfExists('allow_rss_atom_feeds', $data ?? [], null);
        $this->setIfExists('allow_webhook_subscribers', $data ?? [], null);
        $this->setIfExists('notifications_from_email', $data ?? [], null);
        $this->setIfExists('notifications_email_footer', $data ?? [], null);
        $this->setIfExists('activity_score', $data ?? [], null);
        $this->setIfExists('twitter_username', $data ?? [], null);
        $this->setIfExists('viewers_must_be_team_members', $data ?? [], null);
        $this->setIfExists('ip_restrictions', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('css_body_background_color', $data ?? [], null);
        $this->setIfExists('css_font_color', $data ?? [], null);
        $this->setIfExists('css_light_font_color', $data ?? [], null);
        $this->setIfExists('css_greens', $data ?? [], null);
        $this->setIfExists('css_yellows', $data ?? [], null);
        $this->setIfExists('css_oranges', $data ?? [], null);
        $this->setIfExists('css_blues', $data ?? [], null);
        $this->setIfExists('css_reds', $data ?? [], null);
        $this->setIfExists('css_border_color', $data ?? [], null);
        $this->setIfExists('css_graph_color', $data ?? [], null);
        $this->setIfExists('css_link_color', $data ?? [], null);
        $this->setIfExists('css_no_data', $data ?? [], null);
        $this->setIfExists('favicon_logo', $data ?? [], null);
        $this->setIfExists('transactional_logo', $data ?? [], null);
        $this->setIfExists('hero_cover', $data ?? [], null);
        $this->setIfExists('email_logo', $data ?? [], null);
        $this->setIfExists('twitter_logo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Page identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Timestamp the record was created
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Timestamp the record was last updated
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of your page to be displayed
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets page_description
     *
     * @return string|null
     */
    public function getPageDescription()
    {
        return $this->container['page_description'];
    }

    /**
     * Sets page_description
     *
     * @param string|null $page_description page_description
     *
     * @return self
     */
    public function setPageDescription($page_description)
    {
        if (is_null($page_description)) {
            throw new \InvalidArgumentException('non-nullable page_description cannot be null');
        }
        $this->container['page_description'] = $page_description;

        return $this;
    }

    /**
     * Gets headline
     *
     * @return string|null
     */
    public function getHeadline()
    {
        return $this->container['headline'];
    }

    /**
     * Sets headline
     *
     * @param string|null $headline headline
     *
     * @return self
     */
    public function setHeadline($headline)
    {
        if (is_null($headline)) {
            throw new \InvalidArgumentException('non-nullable headline cannot be null');
        }
        $this->container['headline'] = $headline;

        return $this;
    }

    /**
     * Gets branding
     *
     * @return string|null
     */
    public function getBranding()
    {
        return $this->container['branding'];
    }

    /**
     * Sets branding
     *
     * @param string|null $branding The main template your statuspage will use
     *
     * @return self
     */
    public function setBranding($branding)
    {
        if (is_null($branding)) {
            throw new \InvalidArgumentException('non-nullable branding cannot be null');
        }
        $this->container['branding'] = $branding;

        return $this;
    }

    /**
     * Gets subdomain
     *
     * @return string|null
     */
    public function getSubdomain()
    {
        return $this->container['subdomain'];
    }

    /**
     * Sets subdomain
     *
     * @param string|null $subdomain Subdomain at which to access your status page
     *
     * @return self
     */
    public function setSubdomain($subdomain)
    {
        if (is_null($subdomain)) {
            throw new \InvalidArgumentException('non-nullable subdomain cannot be null');
        }
        $this->container['subdomain'] = $subdomain;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain CNAME alias for your status page
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Website of your page.  Clicking on your statuspage image will link here.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets support_url
     *
     * @return string|null
     */
    public function getSupportUrl()
    {
        return $this->container['support_url'];
    }

    /**
     * Sets support_url
     *
     * @param string|null $support_url support_url
     *
     * @return self
     */
    public function setSupportUrl($support_url)
    {
        if (is_null($support_url)) {
            throw new \InvalidArgumentException('non-nullable support_url cannot be null');
        }
        $this->container['support_url'] = $support_url;

        return $this;
    }

    /**
     * Gets hidden_from_search
     *
     * @return bool|null
     */
    public function getHiddenFromSearch()
    {
        return $this->container['hidden_from_search'];
    }

    /**
     * Sets hidden_from_search
     *
     * @param bool|null $hidden_from_search Should your page hide itself from search engines
     *
     * @return self
     */
    public function setHiddenFromSearch($hidden_from_search)
    {
        if (is_null($hidden_from_search)) {
            throw new \InvalidArgumentException('non-nullable hidden_from_search cannot be null');
        }
        $this->container['hidden_from_search'] = $hidden_from_search;

        return $this;
    }

    /**
     * Gets allow_page_subscribers
     *
     * @return bool|null
     */
    public function getAllowPageSubscribers()
    {
        return $this->container['allow_page_subscribers'];
    }

    /**
     * Sets allow_page_subscribers
     *
     * @param bool|null $allow_page_subscribers Can your users subscribe to all notifications on the page
     *
     * @return self
     */
    public function setAllowPageSubscribers($allow_page_subscribers)
    {
        if (is_null($allow_page_subscribers)) {
            throw new \InvalidArgumentException('non-nullable allow_page_subscribers cannot be null');
        }
        $this->container['allow_page_subscribers'] = $allow_page_subscribers;

        return $this;
    }

    /**
     * Gets allow_incident_subscribers
     *
     * @return bool|null
     */
    public function getAllowIncidentSubscribers()
    {
        return $this->container['allow_incident_subscribers'];
    }

    /**
     * Sets allow_incident_subscribers
     *
     * @param bool|null $allow_incident_subscribers Can your users subscribe to notifications for a single incident
     *
     * @return self
     */
    public function setAllowIncidentSubscribers($allow_incident_subscribers)
    {
        if (is_null($allow_incident_subscribers)) {
            throw new \InvalidArgumentException('non-nullable allow_incident_subscribers cannot be null');
        }
        $this->container['allow_incident_subscribers'] = $allow_incident_subscribers;

        return $this;
    }

    /**
     * Gets allow_email_subscribers
     *
     * @return bool|null
     */
    public function getAllowEmailSubscribers()
    {
        return $this->container['allow_email_subscribers'];
    }

    /**
     * Sets allow_email_subscribers
     *
     * @param bool|null $allow_email_subscribers Can your users choose to receive notifications via email
     *
     * @return self
     */
    public function setAllowEmailSubscribers($allow_email_subscribers)
    {
        if (is_null($allow_email_subscribers)) {
            throw new \InvalidArgumentException('non-nullable allow_email_subscribers cannot be null');
        }
        $this->container['allow_email_subscribers'] = $allow_email_subscribers;

        return $this;
    }

    /**
     * Gets allow_sms_subscribers
     *
     * @return bool|null
     */
    public function getAllowSmsSubscribers()
    {
        return $this->container['allow_sms_subscribers'];
    }

    /**
     * Sets allow_sms_subscribers
     *
     * @param bool|null $allow_sms_subscribers Can your users choose to receive notifications via SMS
     *
     * @return self
     */
    public function setAllowSmsSubscribers($allow_sms_subscribers)
    {
        if (is_null($allow_sms_subscribers)) {
            throw new \InvalidArgumentException('non-nullable allow_sms_subscribers cannot be null');
        }
        $this->container['allow_sms_subscribers'] = $allow_sms_subscribers;

        return $this;
    }

    /**
     * Gets allow_rss_atom_feeds
     *
     * @return bool|null
     */
    public function getAllowRssAtomFeeds()
    {
        return $this->container['allow_rss_atom_feeds'];
    }

    /**
     * Sets allow_rss_atom_feeds
     *
     * @param bool|null $allow_rss_atom_feeds Can your users choose to access incident feeds via RSS/Atom (not functional on Audience-Specific pages)
     *
     * @return self
     */
    public function setAllowRssAtomFeeds($allow_rss_atom_feeds)
    {
        if (is_null($allow_rss_atom_feeds)) {
            throw new \InvalidArgumentException('non-nullable allow_rss_atom_feeds cannot be null');
        }
        $this->container['allow_rss_atom_feeds'] = $allow_rss_atom_feeds;

        return $this;
    }

    /**
     * Gets allow_webhook_subscribers
     *
     * @return bool|null
     */
    public function getAllowWebhookSubscribers()
    {
        return $this->container['allow_webhook_subscribers'];
    }

    /**
     * Sets allow_webhook_subscribers
     *
     * @param bool|null $allow_webhook_subscribers Can your users choose to receive notifications via Webhooks
     *
     * @return self
     */
    public function setAllowWebhookSubscribers($allow_webhook_subscribers)
    {
        if (is_null($allow_webhook_subscribers)) {
            throw new \InvalidArgumentException('non-nullable allow_webhook_subscribers cannot be null');
        }
        $this->container['allow_webhook_subscribers'] = $allow_webhook_subscribers;

        return $this;
    }

    /**
     * Gets notifications_from_email
     *
     * @return string|null
     */
    public function getNotificationsFromEmail()
    {
        return $this->container['notifications_from_email'];
    }

    /**
     * Sets notifications_from_email
     *
     * @param string|null $notifications_from_email Allows you to customize the email address your page notifications come from
     *
     * @return self
     */
    public function setNotificationsFromEmail($notifications_from_email)
    {
        if (is_null($notifications_from_email)) {
            throw new \InvalidArgumentException('non-nullable notifications_from_email cannot be null');
        }
        $this->container['notifications_from_email'] = $notifications_from_email;

        return $this;
    }

    /**
     * Gets notifications_email_footer
     *
     * @return string|null
     */
    public function getNotificationsEmailFooter()
    {
        return $this->container['notifications_email_footer'];
    }

    /**
     * Sets notifications_email_footer
     *
     * @param string|null $notifications_email_footer Allows you to customize the footer appearing on your notification emails.  Accepts Markdown for formatting
     *
     * @return self
     */
    public function setNotificationsEmailFooter($notifications_email_footer)
    {
        if (is_null($notifications_email_footer)) {
            throw new \InvalidArgumentException('non-nullable notifications_email_footer cannot be null');
        }
        $this->container['notifications_email_footer'] = $notifications_email_footer;

        return $this;
    }

    /**
     * Gets activity_score
     *
     * @return float|null
     */
    public function getActivityScore()
    {
        return $this->container['activity_score'];
    }

    /**
     * Sets activity_score
     *
     * @param float|null $activity_score activity_score
     *
     * @return self
     */
    public function setActivityScore($activity_score)
    {
        if (is_null($activity_score)) {
            throw new \InvalidArgumentException('non-nullable activity_score cannot be null');
        }
        $this->container['activity_score'] = $activity_score;

        return $this;
    }

    /**
     * Gets twitter_username
     *
     * @return string|null
     */
    public function getTwitterUsername()
    {
        return $this->container['twitter_username'];
    }

    /**
     * Sets twitter_username
     *
     * @param string|null $twitter_username twitter_username
     *
     * @return self
     */
    public function setTwitterUsername($twitter_username)
    {
        if (is_null($twitter_username)) {
            throw new \InvalidArgumentException('non-nullable twitter_username cannot be null');
        }
        $this->container['twitter_username'] = $twitter_username;

        return $this;
    }

    /**
     * Gets viewers_must_be_team_members
     *
     * @return bool|null
     */
    public function getViewersMustBeTeamMembers()
    {
        return $this->container['viewers_must_be_team_members'];
    }

    /**
     * Sets viewers_must_be_team_members
     *
     * @param bool|null $viewers_must_be_team_members viewers_must_be_team_members
     *
     * @return self
     */
    public function setViewersMustBeTeamMembers($viewers_must_be_team_members)
    {
        if (is_null($viewers_must_be_team_members)) {
            throw new \InvalidArgumentException('non-nullable viewers_must_be_team_members cannot be null');
        }
        $this->container['viewers_must_be_team_members'] = $viewers_must_be_team_members;

        return $this;
    }

    /**
     * Gets ip_restrictions
     *
     * @return string|null
     */
    public function getIpRestrictions()
    {
        return $this->container['ip_restrictions'];
    }

    /**
     * Sets ip_restrictions
     *
     * @param string|null $ip_restrictions ip_restrictions
     *
     * @return self
     */
    public function setIpRestrictions($ip_restrictions)
    {
        if (is_null($ip_restrictions)) {
            throw new \InvalidArgumentException('non-nullable ip_restrictions cannot be null');
        }
        $this->container['ip_restrictions'] = $ip_restrictions;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string|null $time_zone Timezone configured for your page
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            throw new \InvalidArgumentException('non-nullable time_zone cannot be null');
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets css_body_background_color
     *
     * @return string|null
     */
    public function getCssBodyBackgroundColor()
    {
        return $this->container['css_body_background_color'];
    }

    /**
     * Sets css_body_background_color
     *
     * @param string|null $css_body_background_color CSS Color
     *
     * @return self
     */
    public function setCssBodyBackgroundColor($css_body_background_color)
    {
        if (is_null($css_body_background_color)) {
            throw new \InvalidArgumentException('non-nullable css_body_background_color cannot be null');
        }
        $this->container['css_body_background_color'] = $css_body_background_color;

        return $this;
    }

    /**
     * Gets css_font_color
     *
     * @return string|null
     */
    public function getCssFontColor()
    {
        return $this->container['css_font_color'];
    }

    /**
     * Sets css_font_color
     *
     * @param string|null $css_font_color CSS Color
     *
     * @return self
     */
    public function setCssFontColor($css_font_color)
    {
        if (is_null($css_font_color)) {
            throw new \InvalidArgumentException('non-nullable css_font_color cannot be null');
        }
        $this->container['css_font_color'] = $css_font_color;

        return $this;
    }

    /**
     * Gets css_light_font_color
     *
     * @return string|null
     */
    public function getCssLightFontColor()
    {
        return $this->container['css_light_font_color'];
    }

    /**
     * Sets css_light_font_color
     *
     * @param string|null $css_light_font_color CSS Color
     *
     * @return self
     */
    public function setCssLightFontColor($css_light_font_color)
    {
        if (is_null($css_light_font_color)) {
            throw new \InvalidArgumentException('non-nullable css_light_font_color cannot be null');
        }
        $this->container['css_light_font_color'] = $css_light_font_color;

        return $this;
    }

    /**
     * Gets css_greens
     *
     * @return string|null
     */
    public function getCssGreens()
    {
        return $this->container['css_greens'];
    }

    /**
     * Sets css_greens
     *
     * @param string|null $css_greens CSS Color
     *
     * @return self
     */
    public function setCssGreens($css_greens)
    {
        if (is_null($css_greens)) {
            throw new \InvalidArgumentException('non-nullable css_greens cannot be null');
        }
        $this->container['css_greens'] = $css_greens;

        return $this;
    }

    /**
     * Gets css_yellows
     *
     * @return string|null
     */
    public function getCssYellows()
    {
        return $this->container['css_yellows'];
    }

    /**
     * Sets css_yellows
     *
     * @param string|null $css_yellows CSS Color
     *
     * @return self
     */
    public function setCssYellows($css_yellows)
    {
        if (is_null($css_yellows)) {
            throw new \InvalidArgumentException('non-nullable css_yellows cannot be null');
        }
        $this->container['css_yellows'] = $css_yellows;

        return $this;
    }

    /**
     * Gets css_oranges
     *
     * @return string|null
     */
    public function getCssOranges()
    {
        return $this->container['css_oranges'];
    }

    /**
     * Sets css_oranges
     *
     * @param string|null $css_oranges CSS Color
     *
     * @return self
     */
    public function setCssOranges($css_oranges)
    {
        if (is_null($css_oranges)) {
            throw new \InvalidArgumentException('non-nullable css_oranges cannot be null');
        }
        $this->container['css_oranges'] = $css_oranges;

        return $this;
    }

    /**
     * Gets css_blues
     *
     * @return string|null
     */
    public function getCssBlues()
    {
        return $this->container['css_blues'];
    }

    /**
     * Sets css_blues
     *
     * @param string|null $css_blues CSS Color
     *
     * @return self
     */
    public function setCssBlues($css_blues)
    {
        if (is_null($css_blues)) {
            throw new \InvalidArgumentException('non-nullable css_blues cannot be null');
        }
        $this->container['css_blues'] = $css_blues;

        return $this;
    }

    /**
     * Gets css_reds
     *
     * @return string|null
     */
    public function getCssReds()
    {
        return $this->container['css_reds'];
    }

    /**
     * Sets css_reds
     *
     * @param string|null $css_reds CSS Color
     *
     * @return self
     */
    public function setCssReds($css_reds)
    {
        if (is_null($css_reds)) {
            throw new \InvalidArgumentException('non-nullable css_reds cannot be null');
        }
        $this->container['css_reds'] = $css_reds;

        return $this;
    }

    /**
     * Gets css_border_color
     *
     * @return string|null
     */
    public function getCssBorderColor()
    {
        return $this->container['css_border_color'];
    }

    /**
     * Sets css_border_color
     *
     * @param string|null $css_border_color CSS Color
     *
     * @return self
     */
    public function setCssBorderColor($css_border_color)
    {
        if (is_null($css_border_color)) {
            throw new \InvalidArgumentException('non-nullable css_border_color cannot be null');
        }
        $this->container['css_border_color'] = $css_border_color;

        return $this;
    }

    /**
     * Gets css_graph_color
     *
     * @return string|null
     */
    public function getCssGraphColor()
    {
        return $this->container['css_graph_color'];
    }

    /**
     * Sets css_graph_color
     *
     * @param string|null $css_graph_color CSS Color
     *
     * @return self
     */
    public function setCssGraphColor($css_graph_color)
    {
        if (is_null($css_graph_color)) {
            throw new \InvalidArgumentException('non-nullable css_graph_color cannot be null');
        }
        $this->container['css_graph_color'] = $css_graph_color;

        return $this;
    }

    /**
     * Gets css_link_color
     *
     * @return string|null
     */
    public function getCssLinkColor()
    {
        return $this->container['css_link_color'];
    }

    /**
     * Sets css_link_color
     *
     * @param string|null $css_link_color CSS Color
     *
     * @return self
     */
    public function setCssLinkColor($css_link_color)
    {
        if (is_null($css_link_color)) {
            throw new \InvalidArgumentException('non-nullable css_link_color cannot be null');
        }
        $this->container['css_link_color'] = $css_link_color;

        return $this;
    }

    /**
     * Gets css_no_data
     *
     * @return string|null
     */
    public function getCssNoData()
    {
        return $this->container['css_no_data'];
    }

    /**
     * Sets css_no_data
     *
     * @param string|null $css_no_data CSS Color
     *
     * @return self
     */
    public function setCssNoData($css_no_data)
    {
        if (is_null($css_no_data)) {
            throw new \InvalidArgumentException('non-nullable css_no_data cannot be null');
        }
        $this->container['css_no_data'] = $css_no_data;

        return $this;
    }

    /**
     * Gets favicon_logo
     *
     * @return string|null
     */
    public function getFaviconLogo()
    {
        return $this->container['favicon_logo'];
    }

    /**
     * Sets favicon_logo
     *
     * @param string|null $favicon_logo favicon_logo
     *
     * @return self
     */
    public function setFaviconLogo($favicon_logo)
    {
        if (is_null($favicon_logo)) {
            throw new \InvalidArgumentException('non-nullable favicon_logo cannot be null');
        }
        $this->container['favicon_logo'] = $favicon_logo;

        return $this;
    }

    /**
     * Gets transactional_logo
     *
     * @return string|null
     */
    public function getTransactionalLogo()
    {
        return $this->container['transactional_logo'];
    }

    /**
     * Sets transactional_logo
     *
     * @param string|null $transactional_logo transactional_logo
     *
     * @return self
     */
    public function setTransactionalLogo($transactional_logo)
    {
        if (is_null($transactional_logo)) {
            throw new \InvalidArgumentException('non-nullable transactional_logo cannot be null');
        }
        $this->container['transactional_logo'] = $transactional_logo;

        return $this;
    }

    /**
     * Gets hero_cover
     *
     * @return string|null
     */
    public function getHeroCover()
    {
        return $this->container['hero_cover'];
    }

    /**
     * Sets hero_cover
     *
     * @param string|null $hero_cover hero_cover
     *
     * @return self
     */
    public function setHeroCover($hero_cover)
    {
        if (is_null($hero_cover)) {
            throw new \InvalidArgumentException('non-nullable hero_cover cannot be null');
        }
        $this->container['hero_cover'] = $hero_cover;

        return $this;
    }

    /**
     * Gets email_logo
     *
     * @return string|null
     */
    public function getEmailLogo()
    {
        return $this->container['email_logo'];
    }

    /**
     * Sets email_logo
     *
     * @param string|null $email_logo email_logo
     *
     * @return self
     */
    public function setEmailLogo($email_logo)
    {
        if (is_null($email_logo)) {
            throw new \InvalidArgumentException('non-nullable email_logo cannot be null');
        }
        $this->container['email_logo'] = $email_logo;

        return $this;
    }

    /**
     * Gets twitter_logo
     *
     * @return string|null
     */
    public function getTwitterLogo()
    {
        return $this->container['twitter_logo'];
    }

    /**
     * Sets twitter_logo
     *
     * @param string|null $twitter_logo twitter_logo
     *
     * @return self
     */
    public function setTwitterLogo($twitter_logo)
    {
        if (is_null($twitter_logo)) {
            throw new \InvalidArgumentException('non-nullable twitter_logo cannot be null');
        }
        $this->container['twitter_logo'] = $twitter_logo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


