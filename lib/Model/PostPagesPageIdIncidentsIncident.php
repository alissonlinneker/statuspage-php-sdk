<?php
/**
 * PostPagesPageIdIncidentsIncident
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statuspage API
 *
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PostPagesPageIdIncidentsIncident Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostPagesPageIdIncidentsIncident implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'postPagesPageIdIncidents_incident';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'status' => 'string',
        'impact_override' => 'string',
        'scheduled_for' => '\DateTime',
        'scheduled_until' => '\DateTime',
        'scheduled_remind_prior' => 'bool',
        'auto_transition_to_maintenance_state' => 'bool',
        'auto_transition_to_operational_state' => 'bool',
        'scheduled_auto_in_progress' => 'bool',
        'scheduled_auto_completed' => 'bool',
        'auto_transition_deliver_notifications_at_start' => 'bool',
        'auto_transition_deliver_notifications_at_end' => 'bool',
        'metadata' => 'object',
        'deliver_notifications' => 'bool',
        'auto_tweet_at_beginning' => 'bool',
        'auto_tweet_on_completion' => 'bool',
        'auto_tweet_on_creation' => 'bool',
        'auto_tweet_one_hour_before' => 'bool',
        'backfill_date' => 'string',
        'backfilled' => 'bool',
        'body' => 'string',
        'components' => '\OpenAPI\Client\Model\PostPagesPageIdIncidentsIncidentComponents',
        'component_ids' => 'string[]',
        'scheduled_auto_transition' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'status' => null,
        'impact_override' => null,
        'scheduled_for' => 'date-time',
        'scheduled_until' => 'date-time',
        'scheduled_remind_prior' => null,
        'auto_transition_to_maintenance_state' => null,
        'auto_transition_to_operational_state' => null,
        'scheduled_auto_in_progress' => null,
        'scheduled_auto_completed' => null,
        'auto_transition_deliver_notifications_at_start' => null,
        'auto_transition_deliver_notifications_at_end' => null,
        'metadata' => null,
        'deliver_notifications' => null,
        'auto_tweet_at_beginning' => null,
        'auto_tweet_on_completion' => null,
        'auto_tweet_on_creation' => null,
        'auto_tweet_one_hour_before' => null,
        'backfill_date' => null,
        'backfilled' => null,
        'body' => null,
        'components' => null,
        'component_ids' => null,
        'scheduled_auto_transition' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'status' => false,
		'impact_override' => false,
		'scheduled_for' => false,
		'scheduled_until' => false,
		'scheduled_remind_prior' => false,
		'auto_transition_to_maintenance_state' => false,
		'auto_transition_to_operational_state' => false,
		'scheduled_auto_in_progress' => false,
		'scheduled_auto_completed' => false,
		'auto_transition_deliver_notifications_at_start' => false,
		'auto_transition_deliver_notifications_at_end' => false,
		'metadata' => false,
		'deliver_notifications' => false,
		'auto_tweet_at_beginning' => false,
		'auto_tweet_on_completion' => false,
		'auto_tweet_on_creation' => false,
		'auto_tweet_one_hour_before' => false,
		'backfill_date' => false,
		'backfilled' => false,
		'body' => false,
		'components' => false,
		'component_ids' => false,
		'scheduled_auto_transition' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'status' => 'status',
        'impact_override' => 'impact_override',
        'scheduled_for' => 'scheduled_for',
        'scheduled_until' => 'scheduled_until',
        'scheduled_remind_prior' => 'scheduled_remind_prior',
        'auto_transition_to_maintenance_state' => 'auto_transition_to_maintenance_state',
        'auto_transition_to_operational_state' => 'auto_transition_to_operational_state',
        'scheduled_auto_in_progress' => 'scheduled_auto_in_progress',
        'scheduled_auto_completed' => 'scheduled_auto_completed',
        'auto_transition_deliver_notifications_at_start' => 'auto_transition_deliver_notifications_at_start',
        'auto_transition_deliver_notifications_at_end' => 'auto_transition_deliver_notifications_at_end',
        'metadata' => 'metadata',
        'deliver_notifications' => 'deliver_notifications',
        'auto_tweet_at_beginning' => 'auto_tweet_at_beginning',
        'auto_tweet_on_completion' => 'auto_tweet_on_completion',
        'auto_tweet_on_creation' => 'auto_tweet_on_creation',
        'auto_tweet_one_hour_before' => 'auto_tweet_one_hour_before',
        'backfill_date' => 'backfill_date',
        'backfilled' => 'backfilled',
        'body' => 'body',
        'components' => 'components',
        'component_ids' => 'component_ids',
        'scheduled_auto_transition' => 'scheduled_auto_transition'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'status' => 'setStatus',
        'impact_override' => 'setImpactOverride',
        'scheduled_for' => 'setScheduledFor',
        'scheduled_until' => 'setScheduledUntil',
        'scheduled_remind_prior' => 'setScheduledRemindPrior',
        'auto_transition_to_maintenance_state' => 'setAutoTransitionToMaintenanceState',
        'auto_transition_to_operational_state' => 'setAutoTransitionToOperationalState',
        'scheduled_auto_in_progress' => 'setScheduledAutoInProgress',
        'scheduled_auto_completed' => 'setScheduledAutoCompleted',
        'auto_transition_deliver_notifications_at_start' => 'setAutoTransitionDeliverNotificationsAtStart',
        'auto_transition_deliver_notifications_at_end' => 'setAutoTransitionDeliverNotificationsAtEnd',
        'metadata' => 'setMetadata',
        'deliver_notifications' => 'setDeliverNotifications',
        'auto_tweet_at_beginning' => 'setAutoTweetAtBeginning',
        'auto_tweet_on_completion' => 'setAutoTweetOnCompletion',
        'auto_tweet_on_creation' => 'setAutoTweetOnCreation',
        'auto_tweet_one_hour_before' => 'setAutoTweetOneHourBefore',
        'backfill_date' => 'setBackfillDate',
        'backfilled' => 'setBackfilled',
        'body' => 'setBody',
        'components' => 'setComponents',
        'component_ids' => 'setComponentIds',
        'scheduled_auto_transition' => 'setScheduledAutoTransition'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'status' => 'getStatus',
        'impact_override' => 'getImpactOverride',
        'scheduled_for' => 'getScheduledFor',
        'scheduled_until' => 'getScheduledUntil',
        'scheduled_remind_prior' => 'getScheduledRemindPrior',
        'auto_transition_to_maintenance_state' => 'getAutoTransitionToMaintenanceState',
        'auto_transition_to_operational_state' => 'getAutoTransitionToOperationalState',
        'scheduled_auto_in_progress' => 'getScheduledAutoInProgress',
        'scheduled_auto_completed' => 'getScheduledAutoCompleted',
        'auto_transition_deliver_notifications_at_start' => 'getAutoTransitionDeliverNotificationsAtStart',
        'auto_transition_deliver_notifications_at_end' => 'getAutoTransitionDeliverNotificationsAtEnd',
        'metadata' => 'getMetadata',
        'deliver_notifications' => 'getDeliverNotifications',
        'auto_tweet_at_beginning' => 'getAutoTweetAtBeginning',
        'auto_tweet_on_completion' => 'getAutoTweetOnCompletion',
        'auto_tweet_on_creation' => 'getAutoTweetOnCreation',
        'auto_tweet_one_hour_before' => 'getAutoTweetOneHourBefore',
        'backfill_date' => 'getBackfillDate',
        'backfilled' => 'getBackfilled',
        'body' => 'getBody',
        'components' => 'getComponents',
        'component_ids' => 'getComponentIds',
        'scheduled_auto_transition' => 'getScheduledAutoTransition'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_INVESTIGATING = 'investigating';
    public const STATUS_IDENTIFIED = 'identified';
    public const STATUS_MONITORING = 'monitoring';
    public const STATUS_RESOLVED = 'resolved';
    public const STATUS_SCHEDULED = 'scheduled';
    public const STATUS_IN_PROGRESS = 'in_progress';
    public const STATUS_VERIFYING = 'verifying';
    public const STATUS_COMPLETED = 'completed';
    public const IMPACT_OVERRIDE_NONE = 'none';
    public const IMPACT_OVERRIDE_MAINTENANCE = 'maintenance';
    public const IMPACT_OVERRIDE_MINOR = 'minor';
    public const IMPACT_OVERRIDE_MAJOR = 'major';
    public const IMPACT_OVERRIDE_CRITICAL = 'critical';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_INVESTIGATING,
            self::STATUS_IDENTIFIED,
            self::STATUS_MONITORING,
            self::STATUS_RESOLVED,
            self::STATUS_SCHEDULED,
            self::STATUS_IN_PROGRESS,
            self::STATUS_VERIFYING,
            self::STATUS_COMPLETED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImpactOverrideAllowableValues()
    {
        return [
            self::IMPACT_OVERRIDE_NONE,
            self::IMPACT_OVERRIDE_MAINTENANCE,
            self::IMPACT_OVERRIDE_MINOR,
            self::IMPACT_OVERRIDE_MAJOR,
            self::IMPACT_OVERRIDE_CRITICAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('impact_override', $data ?? [], null);
        $this->setIfExists('scheduled_for', $data ?? [], null);
        $this->setIfExists('scheduled_until', $data ?? [], null);
        $this->setIfExists('scheduled_remind_prior', $data ?? [], null);
        $this->setIfExists('auto_transition_to_maintenance_state', $data ?? [], null);
        $this->setIfExists('auto_transition_to_operational_state', $data ?? [], null);
        $this->setIfExists('scheduled_auto_in_progress', $data ?? [], null);
        $this->setIfExists('scheduled_auto_completed', $data ?? [], null);
        $this->setIfExists('auto_transition_deliver_notifications_at_start', $data ?? [], null);
        $this->setIfExists('auto_transition_deliver_notifications_at_end', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('deliver_notifications', $data ?? [], true);
        $this->setIfExists('auto_tweet_at_beginning', $data ?? [], null);
        $this->setIfExists('auto_tweet_on_completion', $data ?? [], null);
        $this->setIfExists('auto_tweet_on_creation', $data ?? [], null);
        $this->setIfExists('auto_tweet_one_hour_before', $data ?? [], null);
        $this->setIfExists('backfill_date', $data ?? [], null);
        $this->setIfExists('backfilled', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('components', $data ?? [], null);
        $this->setIfExists('component_ids', $data ?? [], null);
        $this->setIfExists('scheduled_auto_transition', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getImpactOverrideAllowableValues();
        if (!is_null($this->container['impact_override']) && !in_array($this->container['impact_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'impact_override', must be one of '%s'",
                $this->container['impact_override'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Incident Name. There is a maximum limit of 255 characters.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets impact_override
     *
     * @return string|null
     */
    public function getImpactOverride()
    {
        return $this->container['impact_override'];
    }

    /**
     * Sets impact_override
     *
     * @param string|null $impact_override value to override calculated impact value
     *
     * @return self
     */
    public function setImpactOverride($impact_override)
    {
        if (is_null($impact_override)) {
            throw new \InvalidArgumentException('non-nullable impact_override cannot be null');
        }
        $allowedValues = $this->getImpactOverrideAllowableValues();
        if (!in_array($impact_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'impact_override', must be one of '%s'",
                    $impact_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['impact_override'] = $impact_override;

        return $this;
    }

    /**
     * Gets scheduled_for
     *
     * @return \DateTime|null
     */
    public function getScheduledFor()
    {
        return $this->container['scheduled_for'];
    }

    /**
     * Sets scheduled_for
     *
     * @param \DateTime|null $scheduled_for The timestamp the incident is scheduled for.
     *
     * @return self
     */
    public function setScheduledFor($scheduled_for)
    {
        if (is_null($scheduled_for)) {
            throw new \InvalidArgumentException('non-nullable scheduled_for cannot be null');
        }
        $this->container['scheduled_for'] = $scheduled_for;

        return $this;
    }

    /**
     * Gets scheduled_until
     *
     * @return \DateTime|null
     */
    public function getScheduledUntil()
    {
        return $this->container['scheduled_until'];
    }

    /**
     * Sets scheduled_until
     *
     * @param \DateTime|null $scheduled_until The timestamp the incident is scheduled until.
     *
     * @return self
     */
    public function setScheduledUntil($scheduled_until)
    {
        if (is_null($scheduled_until)) {
            throw new \InvalidArgumentException('non-nullable scheduled_until cannot be null');
        }
        $this->container['scheduled_until'] = $scheduled_until;

        return $this;
    }

    /**
     * Gets scheduled_remind_prior
     *
     * @return bool|null
     */
    public function getScheduledRemindPrior()
    {
        return $this->container['scheduled_remind_prior'];
    }

    /**
     * Sets scheduled_remind_prior
     *
     * @param bool|null $scheduled_remind_prior Controls whether to remind subscribers prior to scheduled incidents.
     *
     * @return self
     */
    public function setScheduledRemindPrior($scheduled_remind_prior)
    {
        if (is_null($scheduled_remind_prior)) {
            throw new \InvalidArgumentException('non-nullable scheduled_remind_prior cannot be null');
        }
        $this->container['scheduled_remind_prior'] = $scheduled_remind_prior;

        return $this;
    }

    /**
     * Gets auto_transition_to_maintenance_state
     *
     * @return bool|null
     */
    public function getAutoTransitionToMaintenanceState()
    {
        return $this->container['auto_transition_to_maintenance_state'];
    }

    /**
     * Sets auto_transition_to_maintenance_state
     *
     * @param bool|null $auto_transition_to_maintenance_state Controls whether change components status to under_maintenance once scheduled maintenance is in progress.
     *
     * @return self
     */
    public function setAutoTransitionToMaintenanceState($auto_transition_to_maintenance_state)
    {
        if (is_null($auto_transition_to_maintenance_state)) {
            throw new \InvalidArgumentException('non-nullable auto_transition_to_maintenance_state cannot be null');
        }
        $this->container['auto_transition_to_maintenance_state'] = $auto_transition_to_maintenance_state;

        return $this;
    }

    /**
     * Gets auto_transition_to_operational_state
     *
     * @return bool|null
     */
    public function getAutoTransitionToOperationalState()
    {
        return $this->container['auto_transition_to_operational_state'];
    }

    /**
     * Sets auto_transition_to_operational_state
     *
     * @param bool|null $auto_transition_to_operational_state Controls whether change components status to operational once scheduled maintenance completes.
     *
     * @return self
     */
    public function setAutoTransitionToOperationalState($auto_transition_to_operational_state)
    {
        if (is_null($auto_transition_to_operational_state)) {
            throw new \InvalidArgumentException('non-nullable auto_transition_to_operational_state cannot be null');
        }
        $this->container['auto_transition_to_operational_state'] = $auto_transition_to_operational_state;

        return $this;
    }

    /**
     * Gets scheduled_auto_in_progress
     *
     * @return bool|null
     */
    public function getScheduledAutoInProgress()
    {
        return $this->container['scheduled_auto_in_progress'];
    }

    /**
     * Sets scheduled_auto_in_progress
     *
     * @param bool|null $scheduled_auto_in_progress Controls whether the incident is scheduled to automatically change to in progress.
     *
     * @return self
     */
    public function setScheduledAutoInProgress($scheduled_auto_in_progress)
    {
        if (is_null($scheduled_auto_in_progress)) {
            throw new \InvalidArgumentException('non-nullable scheduled_auto_in_progress cannot be null');
        }
        $this->container['scheduled_auto_in_progress'] = $scheduled_auto_in_progress;

        return $this;
    }

    /**
     * Gets scheduled_auto_completed
     *
     * @return bool|null
     */
    public function getScheduledAutoCompleted()
    {
        return $this->container['scheduled_auto_completed'];
    }

    /**
     * Sets scheduled_auto_completed
     *
     * @param bool|null $scheduled_auto_completed Controls whether the incident is scheduled to automatically change to complete.
     *
     * @return self
     */
    public function setScheduledAutoCompleted($scheduled_auto_completed)
    {
        if (is_null($scheduled_auto_completed)) {
            throw new \InvalidArgumentException('non-nullable scheduled_auto_completed cannot be null');
        }
        $this->container['scheduled_auto_completed'] = $scheduled_auto_completed;

        return $this;
    }

    /**
     * Gets auto_transition_deliver_notifications_at_start
     *
     * @return bool|null
     */
    public function getAutoTransitionDeliverNotificationsAtStart()
    {
        return $this->container['auto_transition_deliver_notifications_at_start'];
    }

    /**
     * Sets auto_transition_deliver_notifications_at_start
     *
     * @param bool|null $auto_transition_deliver_notifications_at_start Controls whether send notification when scheduled maintenances auto transition to started.
     *
     * @return self
     */
    public function setAutoTransitionDeliverNotificationsAtStart($auto_transition_deliver_notifications_at_start)
    {
        if (is_null($auto_transition_deliver_notifications_at_start)) {
            throw new \InvalidArgumentException('non-nullable auto_transition_deliver_notifications_at_start cannot be null');
        }
        $this->container['auto_transition_deliver_notifications_at_start'] = $auto_transition_deliver_notifications_at_start;

        return $this;
    }

    /**
     * Gets auto_transition_deliver_notifications_at_end
     *
     * @return bool|null
     */
    public function getAutoTransitionDeliverNotificationsAtEnd()
    {
        return $this->container['auto_transition_deliver_notifications_at_end'];
    }

    /**
     * Sets auto_transition_deliver_notifications_at_end
     *
     * @param bool|null $auto_transition_deliver_notifications_at_end Controls whether send notification when scheduled maintenances auto transition to completed.
     *
     * @return self
     */
    public function setAutoTransitionDeliverNotificationsAtEnd($auto_transition_deliver_notifications_at_end)
    {
        if (is_null($auto_transition_deliver_notifications_at_end)) {
            throw new \InvalidArgumentException('non-nullable auto_transition_deliver_notifications_at_end cannot be null');
        }
        $this->container['auto_transition_deliver_notifications_at_end'] = $auto_transition_deliver_notifications_at_end;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Attach a json object to the incident. All top-level values in the object must also be objects.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets deliver_notifications
     *
     * @return bool|null
     */
    public function getDeliverNotifications()
    {
        return $this->container['deliver_notifications'];
    }

    /**
     * Sets deliver_notifications
     *
     * @param bool|null $deliver_notifications Deliver notifications to subscribers if this is true. If this is false, create an incident without notifying customers.
     *
     * @return self
     */
    public function setDeliverNotifications($deliver_notifications)
    {
        if (is_null($deliver_notifications)) {
            throw new \InvalidArgumentException('non-nullable deliver_notifications cannot be null');
        }
        $this->container['deliver_notifications'] = $deliver_notifications;

        return $this;
    }

    /**
     * Gets auto_tweet_at_beginning
     *
     * @return bool|null
     */
    public function getAutoTweetAtBeginning()
    {
        return $this->container['auto_tweet_at_beginning'];
    }

    /**
     * Sets auto_tweet_at_beginning
     *
     * @param bool|null $auto_tweet_at_beginning Controls whether tweet automatically when scheduled maintenance starts.
     *
     * @return self
     */
    public function setAutoTweetAtBeginning($auto_tweet_at_beginning)
    {
        if (is_null($auto_tweet_at_beginning)) {
            throw new \InvalidArgumentException('non-nullable auto_tweet_at_beginning cannot be null');
        }
        $this->container['auto_tweet_at_beginning'] = $auto_tweet_at_beginning;

        return $this;
    }

    /**
     * Gets auto_tweet_on_completion
     *
     * @return bool|null
     */
    public function getAutoTweetOnCompletion()
    {
        return $this->container['auto_tweet_on_completion'];
    }

    /**
     * Sets auto_tweet_on_completion
     *
     * @param bool|null $auto_tweet_on_completion Controls whether tweet automatically when scheduled maintenance completes.
     *
     * @return self
     */
    public function setAutoTweetOnCompletion($auto_tweet_on_completion)
    {
        if (is_null($auto_tweet_on_completion)) {
            throw new \InvalidArgumentException('non-nullable auto_tweet_on_completion cannot be null');
        }
        $this->container['auto_tweet_on_completion'] = $auto_tweet_on_completion;

        return $this;
    }

    /**
     * Gets auto_tweet_on_creation
     *
     * @return bool|null
     */
    public function getAutoTweetOnCreation()
    {
        return $this->container['auto_tweet_on_creation'];
    }

    /**
     * Sets auto_tweet_on_creation
     *
     * @param bool|null $auto_tweet_on_creation Controls whether tweet automatically when scheduled maintenance is created.
     *
     * @return self
     */
    public function setAutoTweetOnCreation($auto_tweet_on_creation)
    {
        if (is_null($auto_tweet_on_creation)) {
            throw new \InvalidArgumentException('non-nullable auto_tweet_on_creation cannot be null');
        }
        $this->container['auto_tweet_on_creation'] = $auto_tweet_on_creation;

        return $this;
    }

    /**
     * Gets auto_tweet_one_hour_before
     *
     * @return bool|null
     */
    public function getAutoTweetOneHourBefore()
    {
        return $this->container['auto_tweet_one_hour_before'];
    }

    /**
     * Sets auto_tweet_one_hour_before
     *
     * @param bool|null $auto_tweet_one_hour_before Controls whether tweet automatically one hour before scheduled maintenance starts.
     *
     * @return self
     */
    public function setAutoTweetOneHourBefore($auto_tweet_one_hour_before)
    {
        if (is_null($auto_tweet_one_hour_before)) {
            throw new \InvalidArgumentException('non-nullable auto_tweet_one_hour_before cannot be null');
        }
        $this->container['auto_tweet_one_hour_before'] = $auto_tweet_one_hour_before;

        return $this;
    }

    /**
     * Gets backfill_date
     *
     * @return string|null
     */
    public function getBackfillDate()
    {
        return $this->container['backfill_date'];
    }

    /**
     * Sets backfill_date
     *
     * @param string|null $backfill_date TimeStamp when incident was backfilled.
     *
     * @return self
     */
    public function setBackfillDate($backfill_date)
    {
        if (is_null($backfill_date)) {
            throw new \InvalidArgumentException('non-nullable backfill_date cannot be null');
        }
        $this->container['backfill_date'] = $backfill_date;

        return $this;
    }

    /**
     * Gets backfilled
     *
     * @return bool|null
     */
    public function getBackfilled()
    {
        return $this->container['backfilled'];
    }

    /**
     * Sets backfilled
     *
     * @param bool|null $backfilled Controls whether incident is backfilled. If true, components cannot be specified.
     *
     * @return self
     */
    public function setBackfilled($backfilled)
    {
        if (is_null($backfilled)) {
            throw new \InvalidArgumentException('non-nullable backfilled cannot be null');
        }
        $this->container['backfilled'] = $backfilled;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body The initial message, created as the first incident update. There is a maximum limit of 25000 characters
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets components
     *
     * @return \OpenAPI\Client\Model\PostPagesPageIdIncidentsIncidentComponents|null
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param \OpenAPI\Client\Model\PostPagesPageIdIncidentsIncidentComponents|null $components components
     *
     * @return self
     */
    public function setComponents($components)
    {
        if (is_null($components)) {
            throw new \InvalidArgumentException('non-nullable components cannot be null');
        }
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets component_ids
     *
     * @return string[]|null
     */
    public function getComponentIds()
    {
        return $this->container['component_ids'];
    }

    /**
     * Sets component_ids
     *
     * @param string[]|null $component_ids List of component_ids affected by this incident
     *
     * @return self
     */
    public function setComponentIds($component_ids)
    {
        if (is_null($component_ids)) {
            throw new \InvalidArgumentException('non-nullable component_ids cannot be null');
        }
        $this->container['component_ids'] = $component_ids;

        return $this;
    }

    /**
     * Gets scheduled_auto_transition
     *
     * @return bool|null
     */
    public function getScheduledAutoTransition()
    {
        return $this->container['scheduled_auto_transition'];
    }

    /**
     * Sets scheduled_auto_transition
     *
     * @param bool|null $scheduled_auto_transition Same as :scheduled_auto_transition_in_progress. Controls whether the incident is scheduled to automatically change to in progress.
     *
     * @return self
     */
    public function setScheduledAutoTransition($scheduled_auto_transition)
    {
        if (is_null($scheduled_auto_transition)) {
            throw new \InvalidArgumentException('non-nullable scheduled_auto_transition cannot be null');
        }
        $this->container['scheduled_auto_transition'] = $scheduled_auto_transition;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


