<?php
/**
 * Metric
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statuspage API
 *
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Metric Class Doc Comment
 *
 * @category Class
 * @description Create a metric for a metric provider
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Metric implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Metric';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'metrics_provider_id' => 'string',
        'metric_identifier' => 'string',
        'name' => 'string',
        'display' => 'bool',
        'tooltip_description' => 'string',
        'backfilled' => 'bool',
        'y_axis_min' => 'float',
        'y_axis_max' => 'float',
        'y_axis_hidden' => 'bool',
        'suffix' => 'string',
        'decimal_places' => 'int',
        'most_recent_data_at' => '\DateTime',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'last_fetched_at' => '\DateTime',
        'backfill_percentage' => 'int',
        'reference_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'metrics_provider_id' => null,
        'metric_identifier' => null,
        'name' => null,
        'display' => null,
        'tooltip_description' => null,
        'backfilled' => null,
        'y_axis_min' => 'float',
        'y_axis_max' => 'float',
        'y_axis_hidden' => null,
        'suffix' => null,
        'decimal_places' => 'int32',
        'most_recent_data_at' => 'date-time',
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'last_fetched_at' => 'date-time',
        'backfill_percentage' => 'int32',
        'reference_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'metrics_provider_id' => false,
		'metric_identifier' => false,
		'name' => false,
		'display' => false,
		'tooltip_description' => false,
		'backfilled' => false,
		'y_axis_min' => false,
		'y_axis_max' => false,
		'y_axis_hidden' => false,
		'suffix' => false,
		'decimal_places' => false,
		'most_recent_data_at' => false,
		'created_at' => false,
		'updated_at' => false,
		'last_fetched_at' => false,
		'backfill_percentage' => false,
		'reference_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'metrics_provider_id' => 'metrics_provider_id',
        'metric_identifier' => 'metric_identifier',
        'name' => 'name',
        'display' => 'display',
        'tooltip_description' => 'tooltip_description',
        'backfilled' => 'backfilled',
        'y_axis_min' => 'y_axis_min',
        'y_axis_max' => 'y_axis_max',
        'y_axis_hidden' => 'y_axis_hidden',
        'suffix' => 'suffix',
        'decimal_places' => 'decimal_places',
        'most_recent_data_at' => 'most_recent_data_at',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'last_fetched_at' => 'last_fetched_at',
        'backfill_percentage' => 'backfill_percentage',
        'reference_name' => 'reference_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'metrics_provider_id' => 'setMetricsProviderId',
        'metric_identifier' => 'setMetricIdentifier',
        'name' => 'setName',
        'display' => 'setDisplay',
        'tooltip_description' => 'setTooltipDescription',
        'backfilled' => 'setBackfilled',
        'y_axis_min' => 'setYAxisMin',
        'y_axis_max' => 'setYAxisMax',
        'y_axis_hidden' => 'setYAxisHidden',
        'suffix' => 'setSuffix',
        'decimal_places' => 'setDecimalPlaces',
        'most_recent_data_at' => 'setMostRecentDataAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'last_fetched_at' => 'setLastFetchedAt',
        'backfill_percentage' => 'setBackfillPercentage',
        'reference_name' => 'setReferenceName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'metrics_provider_id' => 'getMetricsProviderId',
        'metric_identifier' => 'getMetricIdentifier',
        'name' => 'getName',
        'display' => 'getDisplay',
        'tooltip_description' => 'getTooltipDescription',
        'backfilled' => 'getBackfilled',
        'y_axis_min' => 'getYAxisMin',
        'y_axis_max' => 'getYAxisMax',
        'y_axis_hidden' => 'getYAxisHidden',
        'suffix' => 'getSuffix',
        'decimal_places' => 'getDecimalPlaces',
        'most_recent_data_at' => 'getMostRecentDataAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'last_fetched_at' => 'getLastFetchedAt',
        'backfill_percentage' => 'getBackfillPercentage',
        'reference_name' => 'getReferenceName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('metrics_provider_id', $data ?? [], null);
        $this->setIfExists('metric_identifier', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('tooltip_description', $data ?? [], null);
        $this->setIfExists('backfilled', $data ?? [], null);
        $this->setIfExists('y_axis_min', $data ?? [], null);
        $this->setIfExists('y_axis_max', $data ?? [], null);
        $this->setIfExists('y_axis_hidden', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('decimal_places', $data ?? [], null);
        $this->setIfExists('most_recent_data_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('last_fetched_at', $data ?? [], null);
        $this->setIfExists('backfill_percentage', $data ?? [], null);
        $this->setIfExists('reference_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Metric identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets metrics_provider_id
     *
     * @return string|null
     */
    public function getMetricsProviderId()
    {
        return $this->container['metrics_provider_id'];
    }

    /**
     * Sets metrics_provider_id
     *
     * @param string|null $metrics_provider_id Metric Provider identifier
     *
     * @return self
     */
    public function setMetricsProviderId($metrics_provider_id)
    {
        if (is_null($metrics_provider_id)) {
            throw new \InvalidArgumentException('non-nullable metrics_provider_id cannot be null');
        }
        $this->container['metrics_provider_id'] = $metrics_provider_id;

        return $this;
    }

    /**
     * Gets metric_identifier
     *
     * @return string|null
     */
    public function getMetricIdentifier()
    {
        return $this->container['metric_identifier'];
    }

    /**
     * Sets metric_identifier
     *
     * @param string|null $metric_identifier Metric Display identifier used to look up the metric data from the provider
     *
     * @return self
     */
    public function setMetricIdentifier($metric_identifier)
    {
        if (is_null($metric_identifier)) {
            throw new \InvalidArgumentException('non-nullable metric_identifier cannot be null');
        }
        $this->container['metric_identifier'] = $metric_identifier;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of metric
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display
     *
     * @return bool|null
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param bool|null $display Should the metric be displayed
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            throw new \InvalidArgumentException('non-nullable display cannot be null');
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets tooltip_description
     *
     * @return string|null
     */
    public function getTooltipDescription()
    {
        return $this->container['tooltip_description'];
    }

    /**
     * Sets tooltip_description
     *
     * @param string|null $tooltip_description tooltip_description
     *
     * @return self
     */
    public function setTooltipDescription($tooltip_description)
    {
        if (is_null($tooltip_description)) {
            throw new \InvalidArgumentException('non-nullable tooltip_description cannot be null');
        }
        $this->container['tooltip_description'] = $tooltip_description;

        return $this;
    }

    /**
     * Gets backfilled
     *
     * @return bool|null
     */
    public function getBackfilled()
    {
        return $this->container['backfilled'];
    }

    /**
     * Sets backfilled
     *
     * @param bool|null $backfilled backfilled
     *
     * @return self
     */
    public function setBackfilled($backfilled)
    {
        if (is_null($backfilled)) {
            throw new \InvalidArgumentException('non-nullable backfilled cannot be null');
        }
        $this->container['backfilled'] = $backfilled;

        return $this;
    }

    /**
     * Gets y_axis_min
     *
     * @return float|null
     */
    public function getYAxisMin()
    {
        return $this->container['y_axis_min'];
    }

    /**
     * Sets y_axis_min
     *
     * @param float|null $y_axis_min y_axis_min
     *
     * @return self
     */
    public function setYAxisMin($y_axis_min)
    {
        if (is_null($y_axis_min)) {
            throw new \InvalidArgumentException('non-nullable y_axis_min cannot be null');
        }
        $this->container['y_axis_min'] = $y_axis_min;

        return $this;
    }

    /**
     * Gets y_axis_max
     *
     * @return float|null
     */
    public function getYAxisMax()
    {
        return $this->container['y_axis_max'];
    }

    /**
     * Sets y_axis_max
     *
     * @param float|null $y_axis_max y_axis_max
     *
     * @return self
     */
    public function setYAxisMax($y_axis_max)
    {
        if (is_null($y_axis_max)) {
            throw new \InvalidArgumentException('non-nullable y_axis_max cannot be null');
        }
        $this->container['y_axis_max'] = $y_axis_max;

        return $this;
    }

    /**
     * Gets y_axis_hidden
     *
     * @return bool|null
     */
    public function getYAxisHidden()
    {
        return $this->container['y_axis_hidden'];
    }

    /**
     * Sets y_axis_hidden
     *
     * @param bool|null $y_axis_hidden Should the values on the y axis be hidden on render
     *
     * @return self
     */
    public function setYAxisHidden($y_axis_hidden)
    {
        if (is_null($y_axis_hidden)) {
            throw new \InvalidArgumentException('non-nullable y_axis_hidden cannot be null');
        }
        $this->container['y_axis_hidden'] = $y_axis_hidden;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix Suffix to describe the units on the graph
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            throw new \InvalidArgumentException('non-nullable suffix cannot be null');
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets decimal_places
     *
     * @return int|null
     */
    public function getDecimalPlaces()
    {
        return $this->container['decimal_places'];
    }

    /**
     * Sets decimal_places
     *
     * @param int|null $decimal_places decimal_places
     *
     * @return self
     */
    public function setDecimalPlaces($decimal_places)
    {
        if (is_null($decimal_places)) {
            throw new \InvalidArgumentException('non-nullable decimal_places cannot be null');
        }
        $this->container['decimal_places'] = $decimal_places;

        return $this;
    }

    /**
     * Gets most_recent_data_at
     *
     * @return \DateTime|null
     */
    public function getMostRecentDataAt()
    {
        return $this->container['most_recent_data_at'];
    }

    /**
     * Sets most_recent_data_at
     *
     * @param \DateTime|null $most_recent_data_at most_recent_data_at
     *
     * @return self
     */
    public function setMostRecentDataAt($most_recent_data_at)
    {
        if (is_null($most_recent_data_at)) {
            throw new \InvalidArgumentException('non-nullable most_recent_data_at cannot be null');
        }
        $this->container['most_recent_data_at'] = $most_recent_data_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets last_fetched_at
     *
     * @return \DateTime|null
     */
    public function getLastFetchedAt()
    {
        return $this->container['last_fetched_at'];
    }

    /**
     * Sets last_fetched_at
     *
     * @param \DateTime|null $last_fetched_at last_fetched_at
     *
     * @return self
     */
    public function setLastFetchedAt($last_fetched_at)
    {
        if (is_null($last_fetched_at)) {
            throw new \InvalidArgumentException('non-nullable last_fetched_at cannot be null');
        }
        $this->container['last_fetched_at'] = $last_fetched_at;

        return $this;
    }

    /**
     * Gets backfill_percentage
     *
     * @return int|null
     */
    public function getBackfillPercentage()
    {
        return $this->container['backfill_percentage'];
    }

    /**
     * Sets backfill_percentage
     *
     * @param int|null $backfill_percentage backfill_percentage
     *
     * @return self
     */
    public function setBackfillPercentage($backfill_percentage)
    {
        if (is_null($backfill_percentage)) {
            throw new \InvalidArgumentException('non-nullable backfill_percentage cannot be null');
        }
        $this->container['backfill_percentage'] = $backfill_percentage;

        return $this;
    }

    /**
     * Gets reference_name
     *
     * @return string|null
     */
    public function getReferenceName()
    {
        return $this->container['reference_name'];
    }

    /**
     * Sets reference_name
     *
     * @param string|null $reference_name reference_name
     *
     * @return self
     */
    public function setReferenceName($reference_name)
    {
        if (is_null($reference_name)) {
            throw new \InvalidArgumentException('non-nullable reference_name cannot be null');
        }
        $this->container['reference_name'] = $reference_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


