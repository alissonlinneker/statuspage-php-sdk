<?php
/**
 * Postmortem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statuspage API
 *
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Postmortem Class Doc Comment
 *
 * @category Class
 * @description Revert Postmortem
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Postmortem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Postmortem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'preview_key' => 'string',
        'body' => 'string',
        'body_updated_at' => '\DateTime',
        'body_draft' => 'string',
        'body_draft_updated_at' => '\DateTime',
        'published_at' => '\DateTime',
        'notify_subscribers' => 'bool',
        'notify_twitter' => 'bool',
        'custom_tweet' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'preview_key' => null,
        'body' => null,
        'body_updated_at' => 'date-time',
        'body_draft' => null,
        'body_draft_updated_at' => 'date-time',
        'published_at' => 'date-time',
        'notify_subscribers' => null,
        'notify_twitter' => null,
        'custom_tweet' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'preview_key' => false,
		'body' => false,
		'body_updated_at' => false,
		'body_draft' => false,
		'body_draft_updated_at' => false,
		'published_at' => false,
		'notify_subscribers' => false,
		'notify_twitter' => false,
		'custom_tweet' => false,
		'created_at' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'preview_key' => 'preview_key',
        'body' => 'body',
        'body_updated_at' => 'body_updated_at',
        'body_draft' => 'body_draft',
        'body_draft_updated_at' => 'body_draft_updated_at',
        'published_at' => 'published_at',
        'notify_subscribers' => 'notify_subscribers',
        'notify_twitter' => 'notify_twitter',
        'custom_tweet' => 'custom_tweet',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'preview_key' => 'setPreviewKey',
        'body' => 'setBody',
        'body_updated_at' => 'setBodyUpdatedAt',
        'body_draft' => 'setBodyDraft',
        'body_draft_updated_at' => 'setBodyDraftUpdatedAt',
        'published_at' => 'setPublishedAt',
        'notify_subscribers' => 'setNotifySubscribers',
        'notify_twitter' => 'setNotifyTwitter',
        'custom_tweet' => 'setCustomTweet',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'preview_key' => 'getPreviewKey',
        'body' => 'getBody',
        'body_updated_at' => 'getBodyUpdatedAt',
        'body_draft' => 'getBodyDraft',
        'body_draft_updated_at' => 'getBodyDraftUpdatedAt',
        'published_at' => 'getPublishedAt',
        'notify_subscribers' => 'getNotifySubscribers',
        'notify_twitter' => 'getNotifyTwitter',
        'custom_tweet' => 'getCustomTweet',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('preview_key', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('body_updated_at', $data ?? [], null);
        $this->setIfExists('body_draft', $data ?? [], null);
        $this->setIfExists('body_draft_updated_at', $data ?? [], null);
        $this->setIfExists('published_at', $data ?? [], null);
        $this->setIfExists('notify_subscribers', $data ?? [], null);
        $this->setIfExists('notify_twitter', $data ?? [], null);
        $this->setIfExists('custom_tweet', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets preview_key
     *
     * @return string|null
     */
    public function getPreviewKey()
    {
        return $this->container['preview_key'];
    }

    /**
     * Sets preview_key
     *
     * @param string|null $preview_key Preview Key
     *
     * @return self
     */
    public function setPreviewKey($preview_key)
    {
        if (is_null($preview_key)) {
            throw new \InvalidArgumentException('non-nullable preview_key cannot be null');
        }
        $this->container['preview_key'] = $preview_key;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body Postmortem body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets body_updated_at
     *
     * @return \DateTime|null
     */
    public function getBodyUpdatedAt()
    {
        return $this->container['body_updated_at'];
    }

    /**
     * Sets body_updated_at
     *
     * @param \DateTime|null $body_updated_at body_updated_at
     *
     * @return self
     */
    public function setBodyUpdatedAt($body_updated_at)
    {
        if (is_null($body_updated_at)) {
            throw new \InvalidArgumentException('non-nullable body_updated_at cannot be null');
        }
        $this->container['body_updated_at'] = $body_updated_at;

        return $this;
    }

    /**
     * Gets body_draft
     *
     * @return string|null
     */
    public function getBodyDraft()
    {
        return $this->container['body_draft'];
    }

    /**
     * Sets body_draft
     *
     * @param string|null $body_draft Body draft
     *
     * @return self
     */
    public function setBodyDraft($body_draft)
    {
        if (is_null($body_draft)) {
            throw new \InvalidArgumentException('non-nullable body_draft cannot be null');
        }
        $this->container['body_draft'] = $body_draft;

        return $this;
    }

    /**
     * Gets body_draft_updated_at
     *
     * @return \DateTime|null
     */
    public function getBodyDraftUpdatedAt()
    {
        return $this->container['body_draft_updated_at'];
    }

    /**
     * Sets body_draft_updated_at
     *
     * @param \DateTime|null $body_draft_updated_at body_draft_updated_at
     *
     * @return self
     */
    public function setBodyDraftUpdatedAt($body_draft_updated_at)
    {
        if (is_null($body_draft_updated_at)) {
            throw new \InvalidArgumentException('non-nullable body_draft_updated_at cannot be null');
        }
        $this->container['body_draft_updated_at'] = $body_draft_updated_at;

        return $this;
    }

    /**
     * Gets published_at
     *
     * @return \DateTime|null
     */
    public function getPublishedAt()
    {
        return $this->container['published_at'];
    }

    /**
     * Sets published_at
     *
     * @param \DateTime|null $published_at published_at
     *
     * @return self
     */
    public function setPublishedAt($published_at)
    {
        if (is_null($published_at)) {
            throw new \InvalidArgumentException('non-nullable published_at cannot be null');
        }
        $this->container['published_at'] = $published_at;

        return $this;
    }

    /**
     * Gets notify_subscribers
     *
     * @return bool|null
     */
    public function getNotifySubscribers()
    {
        return $this->container['notify_subscribers'];
    }

    /**
     * Sets notify_subscribers
     *
     * @param bool|null $notify_subscribers Should email subscribers be notified.
     *
     * @return self
     */
    public function setNotifySubscribers($notify_subscribers)
    {
        if (is_null($notify_subscribers)) {
            throw new \InvalidArgumentException('non-nullable notify_subscribers cannot be null');
        }
        $this->container['notify_subscribers'] = $notify_subscribers;

        return $this;
    }

    /**
     * Gets notify_twitter
     *
     * @return bool|null
     */
    public function getNotifyTwitter()
    {
        return $this->container['notify_twitter'];
    }

    /**
     * Sets notify_twitter
     *
     * @param bool|null $notify_twitter Should Twitter followers be notified.
     *
     * @return self
     */
    public function setNotifyTwitter($notify_twitter)
    {
        if (is_null($notify_twitter)) {
            throw new \InvalidArgumentException('non-nullable notify_twitter cannot be null');
        }
        $this->container['notify_twitter'] = $notify_twitter;

        return $this;
    }

    /**
     * Gets custom_tweet
     *
     * @return string|null
     */
    public function getCustomTweet()
    {
        return $this->container['custom_tweet'];
    }

    /**
     * Sets custom_tweet
     *
     * @param string|null $custom_tweet Custom tweet for Incident Postmortem
     *
     * @return self
     */
    public function setCustomTweet($custom_tweet)
    {
        if (is_null($custom_tweet)) {
            throw new \InvalidArgumentException('non-nullable custom_tweet cannot be null');
        }
        $this->container['custom_tweet'] = $custom_tweet;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


