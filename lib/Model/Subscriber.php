<?php
/**
 * Subscriber
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statuspage API
 *
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Subscriber Class Doc Comment
 *
 * @category Class
 * @description Get an incident subscriber
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Subscriber implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Subscriber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'skip_confirmation_notification' => 'bool',
        'mode' => 'string',
        'email' => 'string',
        'endpoint' => 'string',
        'phone_number' => 'string',
        'phone_country' => 'string',
        'display_phone_number' => 'string',
        'obfuscated_channel_name' => 'string',
        'workspace_name' => 'string',
        'quarantined_at' => '\DateTime',
        'purge_at' => '\DateTime',
        'components' => 'string',
        'page_access_user_id' => 'string',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'skip_confirmation_notification' => null,
        'mode' => null,
        'email' => null,
        'endpoint' => null,
        'phone_number' => null,
        'phone_country' => null,
        'display_phone_number' => null,
        'obfuscated_channel_name' => null,
        'workspace_name' => null,
        'quarantined_at' => 'date-time',
        'purge_at' => 'date-time',
        'components' => null,
        'page_access_user_id' => null,
        'created_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'skip_confirmation_notification' => false,
		'mode' => false,
		'email' => false,
		'endpoint' => false,
		'phone_number' => false,
		'phone_country' => false,
		'display_phone_number' => false,
		'obfuscated_channel_name' => false,
		'workspace_name' => false,
		'quarantined_at' => false,
		'purge_at' => false,
		'components' => false,
		'page_access_user_id' => false,
		'created_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'skip_confirmation_notification' => 'skip_confirmation_notification',
        'mode' => 'mode',
        'email' => 'email',
        'endpoint' => 'endpoint',
        'phone_number' => 'phone_number',
        'phone_country' => 'phone_country',
        'display_phone_number' => 'display_phone_number',
        'obfuscated_channel_name' => 'obfuscated_channel_name',
        'workspace_name' => 'workspace_name',
        'quarantined_at' => 'quarantined_at',
        'purge_at' => 'purge_at',
        'components' => 'components',
        'page_access_user_id' => 'page_access_user_id',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'skip_confirmation_notification' => 'setSkipConfirmationNotification',
        'mode' => 'setMode',
        'email' => 'setEmail',
        'endpoint' => 'setEndpoint',
        'phone_number' => 'setPhoneNumber',
        'phone_country' => 'setPhoneCountry',
        'display_phone_number' => 'setDisplayPhoneNumber',
        'obfuscated_channel_name' => 'setObfuscatedChannelName',
        'workspace_name' => 'setWorkspaceName',
        'quarantined_at' => 'setQuarantinedAt',
        'purge_at' => 'setPurgeAt',
        'components' => 'setComponents',
        'page_access_user_id' => 'setPageAccessUserId',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'skip_confirmation_notification' => 'getSkipConfirmationNotification',
        'mode' => 'getMode',
        'email' => 'getEmail',
        'endpoint' => 'getEndpoint',
        'phone_number' => 'getPhoneNumber',
        'phone_country' => 'getPhoneCountry',
        'display_phone_number' => 'getDisplayPhoneNumber',
        'obfuscated_channel_name' => 'getObfuscatedChannelName',
        'workspace_name' => 'getWorkspaceName',
        'quarantined_at' => 'getQuarantinedAt',
        'purge_at' => 'getPurgeAt',
        'components' => 'getComponents',
        'page_access_user_id' => 'getPageAccessUserId',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('skip_confirmation_notification', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('endpoint', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('phone_country', $data ?? [], null);
        $this->setIfExists('display_phone_number', $data ?? [], null);
        $this->setIfExists('obfuscated_channel_name', $data ?? [], null);
        $this->setIfExists('workspace_name', $data ?? [], null);
        $this->setIfExists('quarantined_at', $data ?? [], null);
        $this->setIfExists('purge_at', $data ?? [], null);
        $this->setIfExists('components', $data ?? [], null);
        $this->setIfExists('page_access_user_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Subscriber Identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets skip_confirmation_notification
     *
     * @return bool|null
     */
    public function getSkipConfirmationNotification()
    {
        return $this->container['skip_confirmation_notification'];
    }

    /**
     * Sets skip_confirmation_notification
     *
     * @param bool|null $skip_confirmation_notification If this is true, do not notify the user with changes to their subscription.
     *
     * @return self
     */
    public function setSkipConfirmationNotification($skip_confirmation_notification)
    {
        if (is_null($skip_confirmation_notification)) {
            throw new \InvalidArgumentException('non-nullable skip_confirmation_notification cannot be null');
        }
        $this->container['skip_confirmation_notification'] = $skip_confirmation_notification;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode The communication mode of the subscriber.
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address to use to contact the subscriber. Used for Email and Webhook subscribers.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets endpoint
     *
     * @return string|null
     */
    public function getEndpoint()
    {
        return $this->container['endpoint'];
    }

    /**
     * Sets endpoint
     *
     * @param string|null $endpoint The URL where a webhook subscriber elects to receive updates.
     *
     * @return self
     */
    public function setEndpoint($endpoint)
    {
        if (is_null($endpoint)) {
            throw new \InvalidArgumentException('non-nullable endpoint cannot be null');
        }
        $this->container['endpoint'] = $endpoint;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number The phone number used to contact an SMS subscriber
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets phone_country
     *
     * @return string|null
     */
    public function getPhoneCountry()
    {
        return $this->container['phone_country'];
    }

    /**
     * Sets phone_country
     *
     * @param string|null $phone_country The two-character country code representing the country of which the phone_number is a part.
     *
     * @return self
     */
    public function setPhoneCountry($phone_country)
    {
        if (is_null($phone_country)) {
            throw new \InvalidArgumentException('non-nullable phone_country cannot be null');
        }
        $this->container['phone_country'] = $phone_country;

        return $this;
    }

    /**
     * Gets display_phone_number
     *
     * @return string|null
     */
    public function getDisplayPhoneNumber()
    {
        return $this->container['display_phone_number'];
    }

    /**
     * Sets display_phone_number
     *
     * @param string|null $display_phone_number A formatted version of the phone_number and phone_country pair, nicely formatted for display.
     *
     * @return self
     */
    public function setDisplayPhoneNumber($display_phone_number)
    {
        if (is_null($display_phone_number)) {
            throw new \InvalidArgumentException('non-nullable display_phone_number cannot be null');
        }
        $this->container['display_phone_number'] = $display_phone_number;

        return $this;
    }

    /**
     * Gets obfuscated_channel_name
     *
     * @return string|null
     */
    public function getObfuscatedChannelName()
    {
        return $this->container['obfuscated_channel_name'];
    }

    /**
     * Sets obfuscated_channel_name
     *
     * @param string|null $obfuscated_channel_name Obfuscated slack channel name
     *
     * @return self
     */
    public function setObfuscatedChannelName($obfuscated_channel_name)
    {
        if (is_null($obfuscated_channel_name)) {
            throw new \InvalidArgumentException('non-nullable obfuscated_channel_name cannot be null');
        }
        $this->container['obfuscated_channel_name'] = $obfuscated_channel_name;

        return $this;
    }

    /**
     * Gets workspace_name
     *
     * @return string|null
     */
    public function getWorkspaceName()
    {
        return $this->container['workspace_name'];
    }

    /**
     * Sets workspace_name
     *
     * @param string|null $workspace_name The workspace name of the slack subscriber.
     *
     * @return self
     */
    public function setWorkspaceName($workspace_name)
    {
        if (is_null($workspace_name)) {
            throw new \InvalidArgumentException('non-nullable workspace_name cannot be null');
        }
        $this->container['workspace_name'] = $workspace_name;

        return $this;
    }

    /**
     * Gets quarantined_at
     *
     * @return \DateTime|null
     */
    public function getQuarantinedAt()
    {
        return $this->container['quarantined_at'];
    }

    /**
     * Sets quarantined_at
     *
     * @param \DateTime|null $quarantined_at The timestamp when the subscriber was quarantined due to an issue reaching them.
     *
     * @return self
     */
    public function setQuarantinedAt($quarantined_at)
    {
        if (is_null($quarantined_at)) {
            throw new \InvalidArgumentException('non-nullable quarantined_at cannot be null');
        }
        $this->container['quarantined_at'] = $quarantined_at;

        return $this;
    }

    /**
     * Gets purge_at
     *
     * @return \DateTime|null
     */
    public function getPurgeAt()
    {
        return $this->container['purge_at'];
    }

    /**
     * Sets purge_at
     *
     * @param \DateTime|null $purge_at The timestamp when a quarantined subscriber will be purged (unsubscribed).
     *
     * @return self
     */
    public function setPurgeAt($purge_at)
    {
        if (is_null($purge_at)) {
            throw new \InvalidArgumentException('non-nullable purge_at cannot be null');
        }
        $this->container['purge_at'] = $purge_at;

        return $this;
    }

    /**
     * Gets components
     *
     * @return string|null
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param string|null $components The components for which the subscriber has elected to receive updates.
     *
     * @return self
     */
    public function setComponents($components)
    {
        if (is_null($components)) {
            throw new \InvalidArgumentException('non-nullable components cannot be null');
        }
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets page_access_user_id
     *
     * @return string|null
     */
    public function getPageAccessUserId()
    {
        return $this->container['page_access_user_id'];
    }

    /**
     * Sets page_access_user_id
     *
     * @param string|null $page_access_user_id The Page Access user this subscriber belongs to (only for audience-specific pages).
     *
     * @return self
     */
    public function setPageAccessUserId($page_access_user_id)
    {
        if (is_null($page_access_user_id)) {
            throw new \InvalidArgumentException('non-nullable page_access_user_id cannot be null');
        }
        $this->container['page_access_user_id'] = $page_access_user_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


