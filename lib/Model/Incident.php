<?php
/**
 * Incident
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statuspage API
 *
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Incident Class Doc Comment
 *
 * @category Class
 * @description Get an incident
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Incident implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Incident';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'components' => '\OpenAPI\Client\Model\Component[]',
        'created_at' => '\DateTime',
        'impact' => 'string',
        'impact_override' => 'string',
        'incident_updates' => '\OpenAPI\Client\Model\IncidentUpdate[]',
        'metadata' => 'Object',
        'monitoring_at' => '\DateTime',
        'name' => 'string',
        'page_id' => 'string',
        'postmortem_body' => 'string',
        'postmortem_body_last_updated_at' => '\DateTime',
        'postmortem_ignored' => 'bool',
        'postmortem_notified_subscribers' => 'bool',
        'postmortem_notified_twitter' => 'bool',
        'postmortem_published_at' => 'bool',
        'resolved_at' => '\DateTime',
        'scheduled_auto_completed' => 'bool',
        'scheduled_auto_in_progress' => 'bool',
        'scheduled_for' => '\DateTime',
        'auto_transition_deliver_notifications_at_end' => 'bool',
        'auto_transition_deliver_notifications_at_start' => 'bool',
        'auto_transition_to_maintenance_state' => 'bool',
        'auto_transition_to_operational_state' => 'bool',
        'scheduled_remind_prior' => 'bool',
        'scheduled_reminded_at' => '\DateTime',
        'scheduled_until' => '\DateTime',
        'shortlink' => 'string',
        'status' => 'string',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'components' => null,
        'created_at' => 'date-time',
        'impact' => null,
        'impact_override' => null,
        'incident_updates' => null,
        'metadata' => null,
        'monitoring_at' => 'date-time',
        'name' => null,
        'page_id' => null,
        'postmortem_body' => null,
        'postmortem_body_last_updated_at' => 'date-time',
        'postmortem_ignored' => null,
        'postmortem_notified_subscribers' => null,
        'postmortem_notified_twitter' => null,
        'postmortem_published_at' => null,
        'resolved_at' => 'date-time',
        'scheduled_auto_completed' => null,
        'scheduled_auto_in_progress' => null,
        'scheduled_for' => 'date-time',
        'auto_transition_deliver_notifications_at_end' => null,
        'auto_transition_deliver_notifications_at_start' => null,
        'auto_transition_to_maintenance_state' => null,
        'auto_transition_to_operational_state' => null,
        'scheduled_remind_prior' => null,
        'scheduled_reminded_at' => 'date-time',
        'scheduled_until' => 'date-time',
        'shortlink' => null,
        'status' => null,
        'updated_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'components' => false,
		'created_at' => false,
		'impact' => false,
		'impact_override' => false,
		'incident_updates' => false,
		'metadata' => false,
		'monitoring_at' => false,
		'name' => false,
		'page_id' => false,
		'postmortem_body' => false,
		'postmortem_body_last_updated_at' => false,
		'postmortem_ignored' => false,
		'postmortem_notified_subscribers' => false,
		'postmortem_notified_twitter' => false,
		'postmortem_published_at' => false,
		'resolved_at' => false,
		'scheduled_auto_completed' => false,
		'scheduled_auto_in_progress' => false,
		'scheduled_for' => false,
		'auto_transition_deliver_notifications_at_end' => false,
		'auto_transition_deliver_notifications_at_start' => false,
		'auto_transition_to_maintenance_state' => false,
		'auto_transition_to_operational_state' => false,
		'scheduled_remind_prior' => false,
		'scheduled_reminded_at' => false,
		'scheduled_until' => false,
		'shortlink' => false,
		'status' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'components' => 'components',
        'created_at' => 'created_at',
        'impact' => 'impact',
        'impact_override' => 'impact_override',
        'incident_updates' => 'incident_updates',
        'metadata' => 'metadata',
        'monitoring_at' => 'monitoring_at',
        'name' => 'name',
        'page_id' => 'page_id',
        'postmortem_body' => 'postmortem_body',
        'postmortem_body_last_updated_at' => 'postmortem_body_last_updated_at',
        'postmortem_ignored' => 'postmortem_ignored',
        'postmortem_notified_subscribers' => 'postmortem_notified_subscribers',
        'postmortem_notified_twitter' => 'postmortem_notified_twitter',
        'postmortem_published_at' => 'postmortem_published_at',
        'resolved_at' => 'resolved_at',
        'scheduled_auto_completed' => 'scheduled_auto_completed',
        'scheduled_auto_in_progress' => 'scheduled_auto_in_progress',
        'scheduled_for' => 'scheduled_for',
        'auto_transition_deliver_notifications_at_end' => 'auto_transition_deliver_notifications_at_end',
        'auto_transition_deliver_notifications_at_start' => 'auto_transition_deliver_notifications_at_start',
        'auto_transition_to_maintenance_state' => 'auto_transition_to_maintenance_state',
        'auto_transition_to_operational_state' => 'auto_transition_to_operational_state',
        'scheduled_remind_prior' => 'scheduled_remind_prior',
        'scheduled_reminded_at' => 'scheduled_reminded_at',
        'scheduled_until' => 'scheduled_until',
        'shortlink' => 'shortlink',
        'status' => 'status',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'components' => 'setComponents',
        'created_at' => 'setCreatedAt',
        'impact' => 'setImpact',
        'impact_override' => 'setImpactOverride',
        'incident_updates' => 'setIncidentUpdates',
        'metadata' => 'setMetadata',
        'monitoring_at' => 'setMonitoringAt',
        'name' => 'setName',
        'page_id' => 'setPageId',
        'postmortem_body' => 'setPostmortemBody',
        'postmortem_body_last_updated_at' => 'setPostmortemBodyLastUpdatedAt',
        'postmortem_ignored' => 'setPostmortemIgnored',
        'postmortem_notified_subscribers' => 'setPostmortemNotifiedSubscribers',
        'postmortem_notified_twitter' => 'setPostmortemNotifiedTwitter',
        'postmortem_published_at' => 'setPostmortemPublishedAt',
        'resolved_at' => 'setResolvedAt',
        'scheduled_auto_completed' => 'setScheduledAutoCompleted',
        'scheduled_auto_in_progress' => 'setScheduledAutoInProgress',
        'scheduled_for' => 'setScheduledFor',
        'auto_transition_deliver_notifications_at_end' => 'setAutoTransitionDeliverNotificationsAtEnd',
        'auto_transition_deliver_notifications_at_start' => 'setAutoTransitionDeliverNotificationsAtStart',
        'auto_transition_to_maintenance_state' => 'setAutoTransitionToMaintenanceState',
        'auto_transition_to_operational_state' => 'setAutoTransitionToOperationalState',
        'scheduled_remind_prior' => 'setScheduledRemindPrior',
        'scheduled_reminded_at' => 'setScheduledRemindedAt',
        'scheduled_until' => 'setScheduledUntil',
        'shortlink' => 'setShortlink',
        'status' => 'setStatus',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'components' => 'getComponents',
        'created_at' => 'getCreatedAt',
        'impact' => 'getImpact',
        'impact_override' => 'getImpactOverride',
        'incident_updates' => 'getIncidentUpdates',
        'metadata' => 'getMetadata',
        'monitoring_at' => 'getMonitoringAt',
        'name' => 'getName',
        'page_id' => 'getPageId',
        'postmortem_body' => 'getPostmortemBody',
        'postmortem_body_last_updated_at' => 'getPostmortemBodyLastUpdatedAt',
        'postmortem_ignored' => 'getPostmortemIgnored',
        'postmortem_notified_subscribers' => 'getPostmortemNotifiedSubscribers',
        'postmortem_notified_twitter' => 'getPostmortemNotifiedTwitter',
        'postmortem_published_at' => 'getPostmortemPublishedAt',
        'resolved_at' => 'getResolvedAt',
        'scheduled_auto_completed' => 'getScheduledAutoCompleted',
        'scheduled_auto_in_progress' => 'getScheduledAutoInProgress',
        'scheduled_for' => 'getScheduledFor',
        'auto_transition_deliver_notifications_at_end' => 'getAutoTransitionDeliverNotificationsAtEnd',
        'auto_transition_deliver_notifications_at_start' => 'getAutoTransitionDeliverNotificationsAtStart',
        'auto_transition_to_maintenance_state' => 'getAutoTransitionToMaintenanceState',
        'auto_transition_to_operational_state' => 'getAutoTransitionToOperationalState',
        'scheduled_remind_prior' => 'getScheduledRemindPrior',
        'scheduled_reminded_at' => 'getScheduledRemindedAt',
        'scheduled_until' => 'getScheduledUntil',
        'shortlink' => 'getShortlink',
        'status' => 'getStatus',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IMPACT_NONE = 'none';
    public const IMPACT_MAINTENANCE = 'maintenance';
    public const IMPACT_MINOR = 'minor';
    public const IMPACT_MAJOR = 'major';
    public const IMPACT_CRITICAL = 'critical';
    public const IMPACT_OVERRIDE_NONE = 'none';
    public const IMPACT_OVERRIDE_MAINTENANCE = 'maintenance';
    public const IMPACT_OVERRIDE_MINOR = 'minor';
    public const IMPACT_OVERRIDE_MAJOR = 'major';
    public const IMPACT_OVERRIDE_CRITICAL = 'critical';
    public const STATUS_INVESTIGATING = 'investigating';
    public const STATUS_IDENTIFIED = 'identified';
    public const STATUS_MONITORING = 'monitoring';
    public const STATUS_RESOLVED = 'resolved';
    public const STATUS_SCHEDULED = 'scheduled';
    public const STATUS_IN_PROGRESS = 'in_progress';
    public const STATUS_VERIFYING = 'verifying';
    public const STATUS_COMPLETED = 'completed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImpactAllowableValues()
    {
        return [
            self::IMPACT_NONE,
            self::IMPACT_MAINTENANCE,
            self::IMPACT_MINOR,
            self::IMPACT_MAJOR,
            self::IMPACT_CRITICAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImpactOverrideAllowableValues()
    {
        return [
            self::IMPACT_OVERRIDE_NONE,
            self::IMPACT_OVERRIDE_MAINTENANCE,
            self::IMPACT_OVERRIDE_MINOR,
            self::IMPACT_OVERRIDE_MAJOR,
            self::IMPACT_OVERRIDE_CRITICAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_INVESTIGATING,
            self::STATUS_IDENTIFIED,
            self::STATUS_MONITORING,
            self::STATUS_RESOLVED,
            self::STATUS_SCHEDULED,
            self::STATUS_IN_PROGRESS,
            self::STATUS_VERIFYING,
            self::STATUS_COMPLETED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('components', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('impact', $data ?? [], null);
        $this->setIfExists('impact_override', $data ?? [], null);
        $this->setIfExists('incident_updates', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('monitoring_at', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('page_id', $data ?? [], null);
        $this->setIfExists('postmortem_body', $data ?? [], null);
        $this->setIfExists('postmortem_body_last_updated_at', $data ?? [], null);
        $this->setIfExists('postmortem_ignored', $data ?? [], null);
        $this->setIfExists('postmortem_notified_subscribers', $data ?? [], null);
        $this->setIfExists('postmortem_notified_twitter', $data ?? [], null);
        $this->setIfExists('postmortem_published_at', $data ?? [], null);
        $this->setIfExists('resolved_at', $data ?? [], null);
        $this->setIfExists('scheduled_auto_completed', $data ?? [], null);
        $this->setIfExists('scheduled_auto_in_progress', $data ?? [], null);
        $this->setIfExists('scheduled_for', $data ?? [], null);
        $this->setIfExists('auto_transition_deliver_notifications_at_end', $data ?? [], null);
        $this->setIfExists('auto_transition_deliver_notifications_at_start', $data ?? [], null);
        $this->setIfExists('auto_transition_to_maintenance_state', $data ?? [], null);
        $this->setIfExists('auto_transition_to_operational_state', $data ?? [], null);
        $this->setIfExists('scheduled_remind_prior', $data ?? [], null);
        $this->setIfExists('scheduled_reminded_at', $data ?? [], null);
        $this->setIfExists('scheduled_until', $data ?? [], null);
        $this->setIfExists('shortlink', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getImpactAllowableValues();
        if (!is_null($this->container['impact']) && !in_array($this->container['impact'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'impact', must be one of '%s'",
                $this->container['impact'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getImpactOverrideAllowableValues();
        if (!is_null($this->container['impact_override']) && !in_array($this->container['impact_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'impact_override', must be one of '%s'",
                $this->container['impact_override'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Incident Identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets components
     *
     * @return \OpenAPI\Client\Model\Component[]|null
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param \OpenAPI\Client\Model\Component[]|null $components Incident components
     *
     * @return self
     */
    public function setComponents($components)
    {
        if (is_null($components)) {
            throw new \InvalidArgumentException('non-nullable components cannot be null');
        }
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The timestamp when the incident was created at.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets impact
     *
     * @return string|null
     */
    public function getImpact()
    {
        return $this->container['impact'];
    }

    /**
     * Sets impact
     *
     * @param string|null $impact The impact of the incident.
     *
     * @return self
     */
    public function setImpact($impact)
    {
        if (is_null($impact)) {
            throw new \InvalidArgumentException('non-nullable impact cannot be null');
        }
        $allowedValues = $this->getImpactAllowableValues();
        if (!in_array($impact, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'impact', must be one of '%s'",
                    $impact,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['impact'] = $impact;

        return $this;
    }

    /**
     * Gets impact_override
     *
     * @return string|null
     */
    public function getImpactOverride()
    {
        return $this->container['impact_override'];
    }

    /**
     * Sets impact_override
     *
     * @param string|null $impact_override value to override calculated impact value
     *
     * @return self
     */
    public function setImpactOverride($impact_override)
    {
        if (is_null($impact_override)) {
            throw new \InvalidArgumentException('non-nullable impact_override cannot be null');
        }
        $allowedValues = $this->getImpactOverrideAllowableValues();
        if (!in_array($impact_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'impact_override', must be one of '%s'",
                    $impact_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['impact_override'] = $impact_override;

        return $this;
    }

    /**
     * Gets incident_updates
     *
     * @return \OpenAPI\Client\Model\IncidentUpdate[]|null
     */
    public function getIncidentUpdates()
    {
        return $this->container['incident_updates'];
    }

    /**
     * Sets incident_updates
     *
     * @param \OpenAPI\Client\Model\IncidentUpdate[]|null $incident_updates The incident updates for incident.
     *
     * @return self
     */
    public function setIncidentUpdates($incident_updates)
    {
        if (is_null($incident_updates)) {
            throw new \InvalidArgumentException('non-nullable incident_updates cannot be null');
        }
        $this->container['incident_updates'] = $incident_updates;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return Object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param Object|null $metadata Metadata attached to the incident. Top level values must be objects.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets monitoring_at
     *
     * @return \DateTime|null
     */
    public function getMonitoringAt()
    {
        return $this->container['monitoring_at'];
    }

    /**
     * Sets monitoring_at
     *
     * @param \DateTime|null $monitoring_at The timestamp when incident entered monitoring state.
     *
     * @return self
     */
    public function setMonitoringAt($monitoring_at)
    {
        if (is_null($monitoring_at)) {
            throw new \InvalidArgumentException('non-nullable monitoring_at cannot be null');
        }
        $this->container['monitoring_at'] = $monitoring_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Incident Name. There is a maximum limit of 255 characters.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets page_id
     *
     * @return string|null
     */
    public function getPageId()
    {
        return $this->container['page_id'];
    }

    /**
     * Sets page_id
     *
     * @param string|null $page_id Incident Page Identifier
     *
     * @return self
     */
    public function setPageId($page_id)
    {
        if (is_null($page_id)) {
            throw new \InvalidArgumentException('non-nullable page_id cannot be null');
        }
        $this->container['page_id'] = $page_id;

        return $this;
    }

    /**
     * Gets postmortem_body
     *
     * @return string|null
     */
    public function getPostmortemBody()
    {
        return $this->container['postmortem_body'];
    }

    /**
     * Sets postmortem_body
     *
     * @param string|null $postmortem_body Body of the Postmortem.
     *
     * @return self
     */
    public function setPostmortemBody($postmortem_body)
    {
        if (is_null($postmortem_body)) {
            throw new \InvalidArgumentException('non-nullable postmortem_body cannot be null');
        }
        $this->container['postmortem_body'] = $postmortem_body;

        return $this;
    }

    /**
     * Gets postmortem_body_last_updated_at
     *
     * @return \DateTime|null
     */
    public function getPostmortemBodyLastUpdatedAt()
    {
        return $this->container['postmortem_body_last_updated_at'];
    }

    /**
     * Sets postmortem_body_last_updated_at
     *
     * @param \DateTime|null $postmortem_body_last_updated_at The timestamp when the incident postmortem body was last updated at.
     *
     * @return self
     */
    public function setPostmortemBodyLastUpdatedAt($postmortem_body_last_updated_at)
    {
        if (is_null($postmortem_body_last_updated_at)) {
            throw new \InvalidArgumentException('non-nullable postmortem_body_last_updated_at cannot be null');
        }
        $this->container['postmortem_body_last_updated_at'] = $postmortem_body_last_updated_at;

        return $this;
    }

    /**
     * Gets postmortem_ignored
     *
     * @return bool|null
     */
    public function getPostmortemIgnored()
    {
        return $this->container['postmortem_ignored'];
    }

    /**
     * Sets postmortem_ignored
     *
     * @param bool|null $postmortem_ignored Controls whether the incident will have postmortem.
     *
     * @return self
     */
    public function setPostmortemIgnored($postmortem_ignored)
    {
        if (is_null($postmortem_ignored)) {
            throw new \InvalidArgumentException('non-nullable postmortem_ignored cannot be null');
        }
        $this->container['postmortem_ignored'] = $postmortem_ignored;

        return $this;
    }

    /**
     * Gets postmortem_notified_subscribers
     *
     * @return bool|null
     */
    public function getPostmortemNotifiedSubscribers()
    {
        return $this->container['postmortem_notified_subscribers'];
    }

    /**
     * Sets postmortem_notified_subscribers
     *
     * @param bool|null $postmortem_notified_subscribers Indicates whether subscribers are already notificed about postmortem.
     *
     * @return self
     */
    public function setPostmortemNotifiedSubscribers($postmortem_notified_subscribers)
    {
        if (is_null($postmortem_notified_subscribers)) {
            throw new \InvalidArgumentException('non-nullable postmortem_notified_subscribers cannot be null');
        }
        $this->container['postmortem_notified_subscribers'] = $postmortem_notified_subscribers;

        return $this;
    }

    /**
     * Gets postmortem_notified_twitter
     *
     * @return bool|null
     */
    public function getPostmortemNotifiedTwitter()
    {
        return $this->container['postmortem_notified_twitter'];
    }

    /**
     * Sets postmortem_notified_twitter
     *
     * @param bool|null $postmortem_notified_twitter Controls whether to decide if notify postmortem on twitter.
     *
     * @return self
     */
    public function setPostmortemNotifiedTwitter($postmortem_notified_twitter)
    {
        if (is_null($postmortem_notified_twitter)) {
            throw new \InvalidArgumentException('non-nullable postmortem_notified_twitter cannot be null');
        }
        $this->container['postmortem_notified_twitter'] = $postmortem_notified_twitter;

        return $this;
    }

    /**
     * Gets postmortem_published_at
     *
     * @return bool|null
     */
    public function getPostmortemPublishedAt()
    {
        return $this->container['postmortem_published_at'];
    }

    /**
     * Sets postmortem_published_at
     *
     * @param bool|null $postmortem_published_at The timestamp when the postmortem was published.
     *
     * @return self
     */
    public function setPostmortemPublishedAt($postmortem_published_at)
    {
        if (is_null($postmortem_published_at)) {
            throw new \InvalidArgumentException('non-nullable postmortem_published_at cannot be null');
        }
        $this->container['postmortem_published_at'] = $postmortem_published_at;

        return $this;
    }

    /**
     * Gets resolved_at
     *
     * @return \DateTime|null
     */
    public function getResolvedAt()
    {
        return $this->container['resolved_at'];
    }

    /**
     * Sets resolved_at
     *
     * @param \DateTime|null $resolved_at The timestamp when incident was resolved.
     *
     * @return self
     */
    public function setResolvedAt($resolved_at)
    {
        if (is_null($resolved_at)) {
            throw new \InvalidArgumentException('non-nullable resolved_at cannot be null');
        }
        $this->container['resolved_at'] = $resolved_at;

        return $this;
    }

    /**
     * Gets scheduled_auto_completed
     *
     * @return bool|null
     */
    public function getScheduledAutoCompleted()
    {
        return $this->container['scheduled_auto_completed'];
    }

    /**
     * Sets scheduled_auto_completed
     *
     * @param bool|null $scheduled_auto_completed Controls whether the incident is scheduled to automatically change to complete.
     *
     * @return self
     */
    public function setScheduledAutoCompleted($scheduled_auto_completed)
    {
        if (is_null($scheduled_auto_completed)) {
            throw new \InvalidArgumentException('non-nullable scheduled_auto_completed cannot be null');
        }
        $this->container['scheduled_auto_completed'] = $scheduled_auto_completed;

        return $this;
    }

    /**
     * Gets scheduled_auto_in_progress
     *
     * @return bool|null
     */
    public function getScheduledAutoInProgress()
    {
        return $this->container['scheduled_auto_in_progress'];
    }

    /**
     * Sets scheduled_auto_in_progress
     *
     * @param bool|null $scheduled_auto_in_progress Controls whether the incident is scheduled to automatically change to in progress.
     *
     * @return self
     */
    public function setScheduledAutoInProgress($scheduled_auto_in_progress)
    {
        if (is_null($scheduled_auto_in_progress)) {
            throw new \InvalidArgumentException('non-nullable scheduled_auto_in_progress cannot be null');
        }
        $this->container['scheduled_auto_in_progress'] = $scheduled_auto_in_progress;

        return $this;
    }

    /**
     * Gets scheduled_for
     *
     * @return \DateTime|null
     */
    public function getScheduledFor()
    {
        return $this->container['scheduled_for'];
    }

    /**
     * Sets scheduled_for
     *
     * @param \DateTime|null $scheduled_for The timestamp the incident is scheduled for.
     *
     * @return self
     */
    public function setScheduledFor($scheduled_for)
    {
        if (is_null($scheduled_for)) {
            throw new \InvalidArgumentException('non-nullable scheduled_for cannot be null');
        }
        $this->container['scheduled_for'] = $scheduled_for;

        return $this;
    }

    /**
     * Gets auto_transition_deliver_notifications_at_end
     *
     * @return bool|null
     */
    public function getAutoTransitionDeliverNotificationsAtEnd()
    {
        return $this->container['auto_transition_deliver_notifications_at_end'];
    }

    /**
     * Sets auto_transition_deliver_notifications_at_end
     *
     * @param bool|null $auto_transition_deliver_notifications_at_end Controls whether send notification when scheduled maintenances auto transition to completed.
     *
     * @return self
     */
    public function setAutoTransitionDeliverNotificationsAtEnd($auto_transition_deliver_notifications_at_end)
    {
        if (is_null($auto_transition_deliver_notifications_at_end)) {
            throw new \InvalidArgumentException('non-nullable auto_transition_deliver_notifications_at_end cannot be null');
        }
        $this->container['auto_transition_deliver_notifications_at_end'] = $auto_transition_deliver_notifications_at_end;

        return $this;
    }

    /**
     * Gets auto_transition_deliver_notifications_at_start
     *
     * @return bool|null
     */
    public function getAutoTransitionDeliverNotificationsAtStart()
    {
        return $this->container['auto_transition_deliver_notifications_at_start'];
    }

    /**
     * Sets auto_transition_deliver_notifications_at_start
     *
     * @param bool|null $auto_transition_deliver_notifications_at_start Controls whether send notification when scheduled maintenances auto transition to started.
     *
     * @return self
     */
    public function setAutoTransitionDeliverNotificationsAtStart($auto_transition_deliver_notifications_at_start)
    {
        if (is_null($auto_transition_deliver_notifications_at_start)) {
            throw new \InvalidArgumentException('non-nullable auto_transition_deliver_notifications_at_start cannot be null');
        }
        $this->container['auto_transition_deliver_notifications_at_start'] = $auto_transition_deliver_notifications_at_start;

        return $this;
    }

    /**
     * Gets auto_transition_to_maintenance_state
     *
     * @return bool|null
     */
    public function getAutoTransitionToMaintenanceState()
    {
        return $this->container['auto_transition_to_maintenance_state'];
    }

    /**
     * Sets auto_transition_to_maintenance_state
     *
     * @param bool|null $auto_transition_to_maintenance_state Controls whether change components status to under_maintenance once scheduled maintenance is in progress.
     *
     * @return self
     */
    public function setAutoTransitionToMaintenanceState($auto_transition_to_maintenance_state)
    {
        if (is_null($auto_transition_to_maintenance_state)) {
            throw new \InvalidArgumentException('non-nullable auto_transition_to_maintenance_state cannot be null');
        }
        $this->container['auto_transition_to_maintenance_state'] = $auto_transition_to_maintenance_state;

        return $this;
    }

    /**
     * Gets auto_transition_to_operational_state
     *
     * @return bool|null
     */
    public function getAutoTransitionToOperationalState()
    {
        return $this->container['auto_transition_to_operational_state'];
    }

    /**
     * Sets auto_transition_to_operational_state
     *
     * @param bool|null $auto_transition_to_operational_state Controls whether change components status to operational once scheduled maintenance completes.
     *
     * @return self
     */
    public function setAutoTransitionToOperationalState($auto_transition_to_operational_state)
    {
        if (is_null($auto_transition_to_operational_state)) {
            throw new \InvalidArgumentException('non-nullable auto_transition_to_operational_state cannot be null');
        }
        $this->container['auto_transition_to_operational_state'] = $auto_transition_to_operational_state;

        return $this;
    }

    /**
     * Gets scheduled_remind_prior
     *
     * @return bool|null
     */
    public function getScheduledRemindPrior()
    {
        return $this->container['scheduled_remind_prior'];
    }

    /**
     * Sets scheduled_remind_prior
     *
     * @param bool|null $scheduled_remind_prior Controls whether to remind subscribers prior to scheduled incidents.
     *
     * @return self
     */
    public function setScheduledRemindPrior($scheduled_remind_prior)
    {
        if (is_null($scheduled_remind_prior)) {
            throw new \InvalidArgumentException('non-nullable scheduled_remind_prior cannot be null');
        }
        $this->container['scheduled_remind_prior'] = $scheduled_remind_prior;

        return $this;
    }

    /**
     * Gets scheduled_reminded_at
     *
     * @return \DateTime|null
     */
    public function getScheduledRemindedAt()
    {
        return $this->container['scheduled_reminded_at'];
    }

    /**
     * Sets scheduled_reminded_at
     *
     * @param \DateTime|null $scheduled_reminded_at The timestamp when the scheduled incident reminder was sent at.
     *
     * @return self
     */
    public function setScheduledRemindedAt($scheduled_reminded_at)
    {
        if (is_null($scheduled_reminded_at)) {
            throw new \InvalidArgumentException('non-nullable scheduled_reminded_at cannot be null');
        }
        $this->container['scheduled_reminded_at'] = $scheduled_reminded_at;

        return $this;
    }

    /**
     * Gets scheduled_until
     *
     * @return \DateTime|null
     */
    public function getScheduledUntil()
    {
        return $this->container['scheduled_until'];
    }

    /**
     * Sets scheduled_until
     *
     * @param \DateTime|null $scheduled_until The timestamp the incident is scheduled until.
     *
     * @return self
     */
    public function setScheduledUntil($scheduled_until)
    {
        if (is_null($scheduled_until)) {
            throw new \InvalidArgumentException('non-nullable scheduled_until cannot be null');
        }
        $this->container['scheduled_until'] = $scheduled_until;

        return $this;
    }

    /**
     * Gets shortlink
     *
     * @return string|null
     */
    public function getShortlink()
    {
        return $this->container['shortlink'];
    }

    /**
     * Sets shortlink
     *
     * @param string|null $shortlink Incident Shortlink.
     *
     * @return self
     */
    public function setShortlink($shortlink)
    {
        if (is_null($shortlink)) {
            throw new \InvalidArgumentException('non-nullable shortlink cannot be null');
        }
        $this->container['shortlink'] = $shortlink;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at The timestamp when the incident was updated at.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


