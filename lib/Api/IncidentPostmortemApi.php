<?php
/**
 * IncidentPostmortemApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statuspage API
 *
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * IncidentPostmortemApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IncidentPostmortemApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deletePagesPageIdIncidentsIncidentIdPostmortem' => [
            'application/json',
        ],
        'getPagesPageIdIncidentsIncidentIdPostmortem' => [
            'application/json',
        ],
        'putPagesPageIdIncidentsIncidentIdPostmortem' => [
            'application/json',
        ],
        'putPagesPageIdIncidentsIncidentIdPostmortemPublish' => [
            'application/json',
        ],
        'putPagesPageIdIncidentsIncidentIdPostmortemRevert' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deletePagesPageIdIncidentsIncidentIdPostmortem
     *
     * Delete Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePagesPageIdIncidentsIncidentIdPostmortem($page_id, $incident_id, string $contentType = self::contentTypes['deletePagesPageIdIncidentsIncidentIdPostmortem'][0])
    {
        $this->deletePagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo($page_id, $incident_id, $contentType);
    }

    /**
     * Operation deletePagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo
     *
     * Delete Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo($page_id, $incident_id, string $contentType = self::contentTypes['deletePagesPageIdIncidentsIncidentIdPostmortem'][0])
    {
        $request = $this->deletePagesPageIdIncidentsIncidentIdPostmortemRequest($page_id, $incident_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePagesPageIdIncidentsIncidentIdPostmortemAsync
     *
     * Delete Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePagesPageIdIncidentsIncidentIdPostmortemAsync($page_id, $incident_id, string $contentType = self::contentTypes['deletePagesPageIdIncidentsIncidentIdPostmortem'][0])
    {
        return $this->deletePagesPageIdIncidentsIncidentIdPostmortemAsyncWithHttpInfo($page_id, $incident_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePagesPageIdIncidentsIncidentIdPostmortemAsyncWithHttpInfo
     *
     * Delete Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePagesPageIdIncidentsIncidentIdPostmortemAsyncWithHttpInfo($page_id, $incident_id, string $contentType = self::contentTypes['deletePagesPageIdIncidentsIncidentIdPostmortem'][0])
    {
        $returnType = '';
        $request = $this->deletePagesPageIdIncidentsIncidentIdPostmortemRequest($page_id, $incident_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePagesPageIdIncidentsIncidentIdPostmortem'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePagesPageIdIncidentsIncidentIdPostmortemRequest($page_id, $incident_id, string $contentType = self::contentTypes['deletePagesPageIdIncidentsIncidentIdPostmortem'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling deletePagesPageIdIncidentsIncidentIdPostmortem'
            );
        }

        // verify the required parameter 'incident_id' is set
        if ($incident_id === null || (is_array($incident_id) && count($incident_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incident_id when calling deletePagesPageIdIncidentsIncidentIdPostmortem'
            );
        }


        $resourcePath = '/pages/{page_id}/incidents/{incident_id}/postmortem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($incident_id !== null) {
            $resourcePath = str_replace(
                '{' . 'incident_id' . '}',
                ObjectSerializer::toPathValue($incident_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPagesPageIdIncidentsIncidentIdPostmortem
     *
     * Get Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Postmortem|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function getPagesPageIdIncidentsIncidentIdPostmortem($page_id, $incident_id, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdPostmortem'][0])
    {
        list($response) = $this->getPagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo($page_id, $incident_id, $contentType);
        return $response;
    }

    /**
     * Operation getPagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo
     *
     * Get Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Postmortem|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo($page_id, $incident_id, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdPostmortem'][0])
    {
        $request = $this->getPagesPageIdIncidentsIncidentIdPostmortemRequest($page_id, $incident_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Postmortem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Postmortem' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Postmortem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Postmortem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Postmortem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPagesPageIdIncidentsIncidentIdPostmortemAsync
     *
     * Get Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagesPageIdIncidentsIncidentIdPostmortemAsync($page_id, $incident_id, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdPostmortem'][0])
    {
        return $this->getPagesPageIdIncidentsIncidentIdPostmortemAsyncWithHttpInfo($page_id, $incident_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPagesPageIdIncidentsIncidentIdPostmortemAsyncWithHttpInfo
     *
     * Get Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagesPageIdIncidentsIncidentIdPostmortemAsyncWithHttpInfo($page_id, $incident_id, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdPostmortem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Postmortem';
        $request = $this->getPagesPageIdIncidentsIncidentIdPostmortemRequest($page_id, $incident_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPagesPageIdIncidentsIncidentIdPostmortem'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPagesPageIdIncidentsIncidentIdPostmortemRequest($page_id, $incident_id, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdPostmortem'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling getPagesPageIdIncidentsIncidentIdPostmortem'
            );
        }

        // verify the required parameter 'incident_id' is set
        if ($incident_id === null || (is_array($incident_id) && count($incident_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incident_id when calling getPagesPageIdIncidentsIncidentIdPostmortem'
            );
        }


        $resourcePath = '/pages/{page_id}/incidents/{incident_id}/postmortem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($incident_id !== null) {
            $resourcePath = str_replace(
                '{' . 'incident_id' . '}',
                ObjectSerializer::toPathValue($incident_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putPagesPageIdIncidentsIncidentIdPostmortem
     *
     * Create Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdIncidentsIncidentIdPostmortem $put_pages_page_id_incidents_incident_id_postmortem put_pages_page_id_incidents_incident_id_postmortem (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Postmortem|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortem($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortem'][0])
    {
        list($response) = $this->putPagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem, $contentType);
        return $response;
    }

    /**
     * Operation putPagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo
     *
     * Create Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdIncidentsIncidentIdPostmortem $put_pages_page_id_incidents_incident_id_postmortem (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Postmortem|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortem'][0])
    {
        $request = $this->putPagesPageIdIncidentsIncidentIdPostmortemRequest($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Postmortem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Postmortem' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Postmortem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Postmortem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Postmortem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putPagesPageIdIncidentsIncidentIdPostmortemAsync
     *
     * Create Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdIncidentsIncidentIdPostmortem $put_pages_page_id_incidents_incident_id_postmortem (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemAsync($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortem'][0])
    {
        return $this->putPagesPageIdIncidentsIncidentIdPostmortemAsyncWithHttpInfo($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putPagesPageIdIncidentsIncidentIdPostmortemAsyncWithHttpInfo
     *
     * Create Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdIncidentsIncidentIdPostmortem $put_pages_page_id_incidents_incident_id_postmortem (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemAsyncWithHttpInfo($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Postmortem';
        $request = $this->putPagesPageIdIncidentsIncidentIdPostmortemRequest($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putPagesPageIdIncidentsIncidentIdPostmortem'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdIncidentsIncidentIdPostmortem $put_pages_page_id_incidents_incident_id_postmortem (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemRequest($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortem'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling putPagesPageIdIncidentsIncidentIdPostmortem'
            );
        }

        // verify the required parameter 'incident_id' is set
        if ($incident_id === null || (is_array($incident_id) && count($incident_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incident_id when calling putPagesPageIdIncidentsIncidentIdPostmortem'
            );
        }

        // verify the required parameter 'put_pages_page_id_incidents_incident_id_postmortem' is set
        if ($put_pages_page_id_incidents_incident_id_postmortem === null || (is_array($put_pages_page_id_incidents_incident_id_postmortem) && count($put_pages_page_id_incidents_incident_id_postmortem) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_pages_page_id_incidents_incident_id_postmortem when calling putPagesPageIdIncidentsIncidentIdPostmortem'
            );
        }


        $resourcePath = '/pages/{page_id}/incidents/{incident_id}/postmortem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($incident_id !== null) {
            $resourcePath = str_replace(
                '{' . 'incident_id' . '}',
                ObjectSerializer::toPathValue($incident_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_pages_page_id_incidents_incident_id_postmortem)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_pages_page_id_incidents_incident_id_postmortem));
            } else {
                $httpBody = $put_pages_page_id_incidents_incident_id_postmortem;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putPagesPageIdIncidentsIncidentIdPostmortemPublish
     *
     * Publish Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdIncidentsIncidentIdPostmortemPublish $put_pages_page_id_incidents_incident_id_postmortem_publish put_pages_page_id_incidents_incident_id_postmortem_publish (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemPublish'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Postmortem|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemPublish($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem_publish, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemPublish'][0])
    {
        list($response) = $this->putPagesPageIdIncidentsIncidentIdPostmortemPublishWithHttpInfo($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem_publish, $contentType);
        return $response;
    }

    /**
     * Operation putPagesPageIdIncidentsIncidentIdPostmortemPublishWithHttpInfo
     *
     * Publish Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdIncidentsIncidentIdPostmortemPublish $put_pages_page_id_incidents_incident_id_postmortem_publish (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemPublish'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Postmortem|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemPublishWithHttpInfo($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem_publish, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemPublish'][0])
    {
        $request = $this->putPagesPageIdIncidentsIncidentIdPostmortemPublishRequest($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem_publish, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Postmortem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Postmortem' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Postmortem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Postmortem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Postmortem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putPagesPageIdIncidentsIncidentIdPostmortemPublishAsync
     *
     * Publish Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdIncidentsIncidentIdPostmortemPublish $put_pages_page_id_incidents_incident_id_postmortem_publish (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemPublish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemPublishAsync($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem_publish, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemPublish'][0])
    {
        return $this->putPagesPageIdIncidentsIncidentIdPostmortemPublishAsyncWithHttpInfo($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem_publish, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putPagesPageIdIncidentsIncidentIdPostmortemPublishAsyncWithHttpInfo
     *
     * Publish Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdIncidentsIncidentIdPostmortemPublish $put_pages_page_id_incidents_incident_id_postmortem_publish (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemPublish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemPublishAsyncWithHttpInfo($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem_publish, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemPublish'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Postmortem';
        $request = $this->putPagesPageIdIncidentsIncidentIdPostmortemPublishRequest($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem_publish, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putPagesPageIdIncidentsIncidentIdPostmortemPublish'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdIncidentsIncidentIdPostmortemPublish $put_pages_page_id_incidents_incident_id_postmortem_publish (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemPublish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemPublishRequest($page_id, $incident_id, $put_pages_page_id_incidents_incident_id_postmortem_publish, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemPublish'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling putPagesPageIdIncidentsIncidentIdPostmortemPublish'
            );
        }

        // verify the required parameter 'incident_id' is set
        if ($incident_id === null || (is_array($incident_id) && count($incident_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incident_id when calling putPagesPageIdIncidentsIncidentIdPostmortemPublish'
            );
        }

        // verify the required parameter 'put_pages_page_id_incidents_incident_id_postmortem_publish' is set
        if ($put_pages_page_id_incidents_incident_id_postmortem_publish === null || (is_array($put_pages_page_id_incidents_incident_id_postmortem_publish) && count($put_pages_page_id_incidents_incident_id_postmortem_publish) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_pages_page_id_incidents_incident_id_postmortem_publish when calling putPagesPageIdIncidentsIncidentIdPostmortemPublish'
            );
        }


        $resourcePath = '/pages/{page_id}/incidents/{incident_id}/postmortem/publish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($incident_id !== null) {
            $resourcePath = str_replace(
                '{' . 'incident_id' . '}',
                ObjectSerializer::toPathValue($incident_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_pages_page_id_incidents_incident_id_postmortem_publish)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_pages_page_id_incidents_incident_id_postmortem_publish));
            } else {
                $httpBody = $put_pages_page_id_incidents_incident_id_postmortem_publish;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putPagesPageIdIncidentsIncidentIdPostmortemRevert
     *
     * Revert Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemRevert'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Postmortem|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemRevert($page_id, $incident_id, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemRevert'][0])
    {
        list($response) = $this->putPagesPageIdIncidentsIncidentIdPostmortemRevertWithHttpInfo($page_id, $incident_id, $contentType);
        return $response;
    }

    /**
     * Operation putPagesPageIdIncidentsIncidentIdPostmortemRevertWithHttpInfo
     *
     * Revert Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemRevert'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Postmortem|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemRevertWithHttpInfo($page_id, $incident_id, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemRevert'][0])
    {
        $request = $this->putPagesPageIdIncidentsIncidentIdPostmortemRevertRequest($page_id, $incident_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Postmortem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Postmortem' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Postmortem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Postmortem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Postmortem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putPagesPageIdIncidentsIncidentIdPostmortemRevertAsync
     *
     * Revert Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemRevert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemRevertAsync($page_id, $incident_id, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemRevert'][0])
    {
        return $this->putPagesPageIdIncidentsIncidentIdPostmortemRevertAsyncWithHttpInfo($page_id, $incident_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putPagesPageIdIncidentsIncidentIdPostmortemRevertAsyncWithHttpInfo
     *
     * Revert Postmortem
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemRevert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemRevertAsyncWithHttpInfo($page_id, $incident_id, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemRevert'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Postmortem';
        $request = $this->putPagesPageIdIncidentsIncidentIdPostmortemRevertRequest($page_id, $incident_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putPagesPageIdIncidentsIncidentIdPostmortemRevert'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemRevert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putPagesPageIdIncidentsIncidentIdPostmortemRevertRequest($page_id, $incident_id, string $contentType = self::contentTypes['putPagesPageIdIncidentsIncidentIdPostmortemRevert'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling putPagesPageIdIncidentsIncidentIdPostmortemRevert'
            );
        }

        // verify the required parameter 'incident_id' is set
        if ($incident_id === null || (is_array($incident_id) && count($incident_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incident_id when calling putPagesPageIdIncidentsIncidentIdPostmortemRevert'
            );
        }


        $resourcePath = '/pages/{page_id}/incidents/{incident_id}/postmortem/revert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($incident_id !== null) {
            $resourcePath = str_replace(
                '{' . 'incident_id' . '}',
                ObjectSerializer::toPathValue($incident_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
