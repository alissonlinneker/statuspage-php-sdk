<?php
/**
 * PageAccessGroupsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statuspage API
 *
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PageAccessGroupsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PageAccessGroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deletePagesPageIdPageAccessGroupsPageAccessGroupId' => [
            'application/json',
        ],
        'getPagesPageIdPageAccessGroups' => [
            'application/json',
        ],
        'getPagesPageIdPageAccessGroupsPageAccessGroupId' => [
            'application/json',
        ],
        'patchPagesPageIdPageAccessGroupsPageAccessGroupId' => [
            'application/json',
        ],
        'postPagesPageIdPageAccessGroups' => [
            'application/json',
        ],
        'putPagesPageIdPageAccessGroupsPageAccessGroupId' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deletePagesPageIdPageAccessGroupsPageAccessGroupId
     *
     * Remove a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PageAccessGroup|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function deletePagesPageIdPageAccessGroupsPageAccessGroupId($page_id, $page_access_group_id, string $contentType = self::contentTypes['deletePagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        list($response) = $this->deletePagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo($page_id, $page_access_group_id, $contentType);
        return $response;
    }

    /**
     * Operation deletePagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo
     *
     * Remove a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PageAccessGroup|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo($page_id, $page_access_group_id, string $contentType = self::contentTypes['deletePagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        $request = $this->deletePagesPageIdPageAccessGroupsPageAccessGroupIdRequest($page_id, $page_access_group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PageAccessGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PageAccessGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PageAccessGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PageAccessGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PageAccessGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePagesPageIdPageAccessGroupsPageAccessGroupIdAsync
     *
     * Remove a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePagesPageIdPageAccessGroupsPageAccessGroupIdAsync($page_id, $page_access_group_id, string $contentType = self::contentTypes['deletePagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        return $this->deletePagesPageIdPageAccessGroupsPageAccessGroupIdAsyncWithHttpInfo($page_id, $page_access_group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePagesPageIdPageAccessGroupsPageAccessGroupIdAsyncWithHttpInfo
     *
     * Remove a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePagesPageIdPageAccessGroupsPageAccessGroupIdAsyncWithHttpInfo($page_id, $page_access_group_id, string $contentType = self::contentTypes['deletePagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PageAccessGroup';
        $request = $this->deletePagesPageIdPageAccessGroupsPageAccessGroupIdRequest($page_id, $page_access_group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePagesPageIdPageAccessGroupsPageAccessGroupId'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePagesPageIdPageAccessGroupsPageAccessGroupIdRequest($page_id, $page_access_group_id, string $contentType = self::contentTypes['deletePagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling deletePagesPageIdPageAccessGroupsPageAccessGroupId'
            );
        }

        // verify the required parameter 'page_access_group_id' is set
        if ($page_access_group_id === null || (is_array($page_access_group_id) && count($page_access_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_access_group_id when calling deletePagesPageIdPageAccessGroupsPageAccessGroupId'
            );
        }


        $resourcePath = '/pages/{page_id}/page_access_groups/{page_access_group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($page_access_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_access_group_id' . '}',
                ObjectSerializer::toPathValue($page_access_group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPagesPageIdPageAccessGroups
     *
     * Get a list of page access groups
     *
     * @param  string $page_id Page identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PageAccessGroup[]|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function getPagesPageIdPageAccessGroups($page_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdPageAccessGroups'][0])
    {
        list($response) = $this->getPagesPageIdPageAccessGroupsWithHttpInfo($page_id, $page, $per_page, $contentType);
        return $response;
    }

    /**
     * Operation getPagesPageIdPageAccessGroupsWithHttpInfo
     *
     * Get a list of page access groups
     *
     * @param  string $page_id Page identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PageAccessGroup[]|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPagesPageIdPageAccessGroupsWithHttpInfo($page_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdPageAccessGroups'][0])
    {
        $request = $this->getPagesPageIdPageAccessGroupsRequest($page_id, $page, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PageAccessGroup[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PageAccessGroup[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PageAccessGroup[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PageAccessGroup[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PageAccessGroup[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPagesPageIdPageAccessGroupsAsync
     *
     * Get a list of page access groups
     *
     * @param  string $page_id Page identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagesPageIdPageAccessGroupsAsync($page_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdPageAccessGroups'][0])
    {
        return $this->getPagesPageIdPageAccessGroupsAsyncWithHttpInfo($page_id, $page, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPagesPageIdPageAccessGroupsAsyncWithHttpInfo
     *
     * Get a list of page access groups
     *
     * @param  string $page_id Page identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagesPageIdPageAccessGroupsAsyncWithHttpInfo($page_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdPageAccessGroups'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PageAccessGroup[]';
        $request = $this->getPagesPageIdPageAccessGroupsRequest($page_id, $page, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPagesPageIdPageAccessGroups'
     *
     * @param  string $page_id Page identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPagesPageIdPageAccessGroupsRequest($page_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdPageAccessGroups'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling getPagesPageIdPageAccessGroups'
            );
        }




        $resourcePath = '/pages/{page_id}/page_access_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPagesPageIdPageAccessGroupsPageAccessGroupId
     *
     * Get a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PageAccessGroup|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function getPagesPageIdPageAccessGroupsPageAccessGroupId($page_id, $page_access_group_id, string $contentType = self::contentTypes['getPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        list($response) = $this->getPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo($page_id, $page_access_group_id, $contentType);
        return $response;
    }

    /**
     * Operation getPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo
     *
     * Get a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PageAccessGroup|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo($page_id, $page_access_group_id, string $contentType = self::contentTypes['getPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        $request = $this->getPagesPageIdPageAccessGroupsPageAccessGroupIdRequest($page_id, $page_access_group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PageAccessGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PageAccessGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PageAccessGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PageAccessGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PageAccessGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPagesPageIdPageAccessGroupsPageAccessGroupIdAsync
     *
     * Get a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagesPageIdPageAccessGroupsPageAccessGroupIdAsync($page_id, $page_access_group_id, string $contentType = self::contentTypes['getPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        return $this->getPagesPageIdPageAccessGroupsPageAccessGroupIdAsyncWithHttpInfo($page_id, $page_access_group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPagesPageIdPageAccessGroupsPageAccessGroupIdAsyncWithHttpInfo
     *
     * Get a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagesPageIdPageAccessGroupsPageAccessGroupIdAsyncWithHttpInfo($page_id, $page_access_group_id, string $contentType = self::contentTypes['getPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PageAccessGroup';
        $request = $this->getPagesPageIdPageAccessGroupsPageAccessGroupIdRequest($page_id, $page_access_group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPagesPageIdPageAccessGroupsPageAccessGroupId'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPagesPageIdPageAccessGroupsPageAccessGroupIdRequest($page_id, $page_access_group_id, string $contentType = self::contentTypes['getPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling getPagesPageIdPageAccessGroupsPageAccessGroupId'
            );
        }

        // verify the required parameter 'page_access_group_id' is set
        if ($page_access_group_id === null || (is_array($page_access_group_id) && count($page_access_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_access_group_id when calling getPagesPageIdPageAccessGroupsPageAccessGroupId'
            );
        }


        $resourcePath = '/pages/{page_id}/page_access_groups/{page_access_group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($page_access_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_access_group_id' . '}',
                ObjectSerializer::toPathValue($page_access_group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchPagesPageIdPageAccessGroupsPageAccessGroupId
     *
     * Update a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  \OpenAPI\Client\Model\PatchPagesPageIdPageAccessGroups $patch_pages_page_id_page_access_groups patch_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PageAccessGroup|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function patchPagesPageIdPageAccessGroupsPageAccessGroupId($page_id, $page_access_group_id, $patch_pages_page_id_page_access_groups, string $contentType = self::contentTypes['patchPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        list($response) = $this->patchPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo($page_id, $page_access_group_id, $patch_pages_page_id_page_access_groups, $contentType);
        return $response;
    }

    /**
     * Operation patchPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo
     *
     * Update a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  \OpenAPI\Client\Model\PatchPagesPageIdPageAccessGroups $patch_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PageAccessGroup|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo($page_id, $page_access_group_id, $patch_pages_page_id_page_access_groups, string $contentType = self::contentTypes['patchPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        $request = $this->patchPagesPageIdPageAccessGroupsPageAccessGroupIdRequest($page_id, $page_access_group_id, $patch_pages_page_id_page_access_groups, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PageAccessGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PageAccessGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PageAccessGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PageAccessGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PageAccessGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchPagesPageIdPageAccessGroupsPageAccessGroupIdAsync
     *
     * Update a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  \OpenAPI\Client\Model\PatchPagesPageIdPageAccessGroups $patch_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchPagesPageIdPageAccessGroupsPageAccessGroupIdAsync($page_id, $page_access_group_id, $patch_pages_page_id_page_access_groups, string $contentType = self::contentTypes['patchPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        return $this->patchPagesPageIdPageAccessGroupsPageAccessGroupIdAsyncWithHttpInfo($page_id, $page_access_group_id, $patch_pages_page_id_page_access_groups, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchPagesPageIdPageAccessGroupsPageAccessGroupIdAsyncWithHttpInfo
     *
     * Update a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  \OpenAPI\Client\Model\PatchPagesPageIdPageAccessGroups $patch_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchPagesPageIdPageAccessGroupsPageAccessGroupIdAsyncWithHttpInfo($page_id, $page_access_group_id, $patch_pages_page_id_page_access_groups, string $contentType = self::contentTypes['patchPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PageAccessGroup';
        $request = $this->patchPagesPageIdPageAccessGroupsPageAccessGroupIdRequest($page_id, $page_access_group_id, $patch_pages_page_id_page_access_groups, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchPagesPageIdPageAccessGroupsPageAccessGroupId'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  \OpenAPI\Client\Model\PatchPagesPageIdPageAccessGroups $patch_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchPagesPageIdPageAccessGroupsPageAccessGroupIdRequest($page_id, $page_access_group_id, $patch_pages_page_id_page_access_groups, string $contentType = self::contentTypes['patchPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling patchPagesPageIdPageAccessGroupsPageAccessGroupId'
            );
        }

        // verify the required parameter 'page_access_group_id' is set
        if ($page_access_group_id === null || (is_array($page_access_group_id) && count($page_access_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_access_group_id when calling patchPagesPageIdPageAccessGroupsPageAccessGroupId'
            );
        }

        // verify the required parameter 'patch_pages_page_id_page_access_groups' is set
        if ($patch_pages_page_id_page_access_groups === null || (is_array($patch_pages_page_id_page_access_groups) && count($patch_pages_page_id_page_access_groups) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patch_pages_page_id_page_access_groups when calling patchPagesPageIdPageAccessGroupsPageAccessGroupId'
            );
        }


        $resourcePath = '/pages/{page_id}/page_access_groups/{page_access_group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($page_access_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_access_group_id' . '}',
                ObjectSerializer::toPathValue($page_access_group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_pages_page_id_page_access_groups)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_pages_page_id_page_access_groups));
            } else {
                $httpBody = $patch_pages_page_id_page_access_groups;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPagesPageIdPageAccessGroups
     *
     * Create a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdPageAccessGroups $post_pages_page_id_page_access_groups post_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdPageAccessGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PageAccessGroup|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function postPagesPageIdPageAccessGroups($page_id, $post_pages_page_id_page_access_groups, string $contentType = self::contentTypes['postPagesPageIdPageAccessGroups'][0])
    {
        list($response) = $this->postPagesPageIdPageAccessGroupsWithHttpInfo($page_id, $post_pages_page_id_page_access_groups, $contentType);
        return $response;
    }

    /**
     * Operation postPagesPageIdPageAccessGroupsWithHttpInfo
     *
     * Create a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdPageAccessGroups $post_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdPageAccessGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PageAccessGroup|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPagesPageIdPageAccessGroupsWithHttpInfo($page_id, $post_pages_page_id_page_access_groups, string $contentType = self::contentTypes['postPagesPageIdPageAccessGroups'][0])
    {
        $request = $this->postPagesPageIdPageAccessGroupsRequest($page_id, $post_pages_page_id_page_access_groups, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\PageAccessGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PageAccessGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PageAccessGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PageAccessGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PageAccessGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postPagesPageIdPageAccessGroupsAsync
     *
     * Create a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdPageAccessGroups $post_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdPageAccessGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPagesPageIdPageAccessGroupsAsync($page_id, $post_pages_page_id_page_access_groups, string $contentType = self::contentTypes['postPagesPageIdPageAccessGroups'][0])
    {
        return $this->postPagesPageIdPageAccessGroupsAsyncWithHttpInfo($page_id, $post_pages_page_id_page_access_groups, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPagesPageIdPageAccessGroupsAsyncWithHttpInfo
     *
     * Create a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdPageAccessGroups $post_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdPageAccessGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPagesPageIdPageAccessGroupsAsyncWithHttpInfo($page_id, $post_pages_page_id_page_access_groups, string $contentType = self::contentTypes['postPagesPageIdPageAccessGroups'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PageAccessGroup';
        $request = $this->postPagesPageIdPageAccessGroupsRequest($page_id, $post_pages_page_id_page_access_groups, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPagesPageIdPageAccessGroups'
     *
     * @param  string $page_id Page identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdPageAccessGroups $post_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdPageAccessGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postPagesPageIdPageAccessGroupsRequest($page_id, $post_pages_page_id_page_access_groups, string $contentType = self::contentTypes['postPagesPageIdPageAccessGroups'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling postPagesPageIdPageAccessGroups'
            );
        }

        // verify the required parameter 'post_pages_page_id_page_access_groups' is set
        if ($post_pages_page_id_page_access_groups === null || (is_array($post_pages_page_id_page_access_groups) && count($post_pages_page_id_page_access_groups) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_pages_page_id_page_access_groups when calling postPagesPageIdPageAccessGroups'
            );
        }


        $resourcePath = '/pages/{page_id}/page_access_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_pages_page_id_page_access_groups)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_pages_page_id_page_access_groups));
            } else {
                $httpBody = $post_pages_page_id_page_access_groups;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putPagesPageIdPageAccessGroupsPageAccessGroupId
     *
     * Update a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdPageAccessGroups $put_pages_page_id_page_access_groups put_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PageAccessGroup|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function putPagesPageIdPageAccessGroupsPageAccessGroupId($page_id, $page_access_group_id, $put_pages_page_id_page_access_groups, string $contentType = self::contentTypes['putPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        list($response) = $this->putPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo($page_id, $page_access_group_id, $put_pages_page_id_page_access_groups, $contentType);
        return $response;
    }

    /**
     * Operation putPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo
     *
     * Update a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdPageAccessGroups $put_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PageAccessGroup|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo($page_id, $page_access_group_id, $put_pages_page_id_page_access_groups, string $contentType = self::contentTypes['putPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        $request = $this->putPagesPageIdPageAccessGroupsPageAccessGroupIdRequest($page_id, $page_access_group_id, $put_pages_page_id_page_access_groups, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PageAccessGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PageAccessGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PageAccessGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PageAccessGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PageAccessGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putPagesPageIdPageAccessGroupsPageAccessGroupIdAsync
     *
     * Update a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdPageAccessGroups $put_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPagesPageIdPageAccessGroupsPageAccessGroupIdAsync($page_id, $page_access_group_id, $put_pages_page_id_page_access_groups, string $contentType = self::contentTypes['putPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        return $this->putPagesPageIdPageAccessGroupsPageAccessGroupIdAsyncWithHttpInfo($page_id, $page_access_group_id, $put_pages_page_id_page_access_groups, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putPagesPageIdPageAccessGroupsPageAccessGroupIdAsyncWithHttpInfo
     *
     * Update a page access group
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdPageAccessGroups $put_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPagesPageIdPageAccessGroupsPageAccessGroupIdAsyncWithHttpInfo($page_id, $page_access_group_id, $put_pages_page_id_page_access_groups, string $contentType = self::contentTypes['putPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PageAccessGroup';
        $request = $this->putPagesPageIdPageAccessGroupsPageAccessGroupIdRequest($page_id, $page_access_group_id, $put_pages_page_id_page_access_groups, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putPagesPageIdPageAccessGroupsPageAccessGroupId'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_group_id Page Access Group Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdPageAccessGroups $put_pages_page_id_page_access_groups (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdPageAccessGroupsPageAccessGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putPagesPageIdPageAccessGroupsPageAccessGroupIdRequest($page_id, $page_access_group_id, $put_pages_page_id_page_access_groups, string $contentType = self::contentTypes['putPagesPageIdPageAccessGroupsPageAccessGroupId'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling putPagesPageIdPageAccessGroupsPageAccessGroupId'
            );
        }

        // verify the required parameter 'page_access_group_id' is set
        if ($page_access_group_id === null || (is_array($page_access_group_id) && count($page_access_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_access_group_id when calling putPagesPageIdPageAccessGroupsPageAccessGroupId'
            );
        }

        // verify the required parameter 'put_pages_page_id_page_access_groups' is set
        if ($put_pages_page_id_page_access_groups === null || (is_array($put_pages_page_id_page_access_groups) && count($put_pages_page_id_page_access_groups) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_pages_page_id_page_access_groups when calling putPagesPageIdPageAccessGroupsPageAccessGroupId'
            );
        }


        $resourcePath = '/pages/{page_id}/page_access_groups/{page_access_group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($page_access_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_access_group_id' . '}',
                ObjectSerializer::toPathValue($page_access_group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_pages_page_id_page_access_groups)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_pages_page_id_page_access_groups));
            } else {
                $httpBody = $put_pages_page_id_page_access_groups;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
