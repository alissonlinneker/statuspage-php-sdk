<?php
/**
 * IncidentSubscribersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statuspage API
 *
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * IncidentSubscribersApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IncidentSubscribersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId' => [
            'application/json',
        ],
        'getPagesPageIdIncidentsIncidentIdSubscribers' => [
            'application/json',
        ],
        'getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId' => [
            'application/json',
        ],
        'postPagesPageIdIncidentsIncidentIdSubscribers' => [
            'application/json',
        ],
        'postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId
     *
     * Unsubscribe an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Subscriber
     */
    public function deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'][0])
    {
        list($response) = $this->deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdWithHttpInfo($page_id, $incident_id, $subscriber_id, $contentType);
        return $response;
    }

    /**
     * Operation deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdWithHttpInfo
     *
     * Unsubscribe an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Subscriber, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdWithHttpInfo($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'][0])
    {
        $request = $this->deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest($page_id, $incident_id, $subscriber_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Subscriber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Subscriber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Subscriber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Subscriber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Subscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsync
     *
     * Unsubscribe an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsync($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'][0])
    {
        return $this->deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsyncWithHttpInfo($page_id, $incident_id, $subscriber_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsyncWithHttpInfo
     *
     * Unsubscribe an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsyncWithHttpInfo($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Subscriber';
        $request = $this->deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest($page_id, $incident_id, $subscriber_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'
            );
        }

        // verify the required parameter 'incident_id' is set
        if ($incident_id === null || (is_array($incident_id) && count($incident_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incident_id when calling deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'
            );
        }

        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId'
            );
        }


        $resourcePath = '/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($incident_id !== null) {
            $resourcePath = str_replace(
                '{' . 'incident_id' . '}',
                ObjectSerializer::toPathValue($incident_id),
                $resourcePath
            );
        }
        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriber_id' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPagesPageIdIncidentsIncidentIdSubscribers
     *
     * Get a list of incident subscribers
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Subscriber[]|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function getPagesPageIdIncidentsIncidentIdSubscribers($page_id, $incident_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribers'][0])
    {
        list($response) = $this->getPagesPageIdIncidentsIncidentIdSubscribersWithHttpInfo($page_id, $incident_id, $page, $per_page, $contentType);
        return $response;
    }

    /**
     * Operation getPagesPageIdIncidentsIncidentIdSubscribersWithHttpInfo
     *
     * Get a list of incident subscribers
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Subscriber[]|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPagesPageIdIncidentsIncidentIdSubscribersWithHttpInfo($page_id, $incident_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribers'][0])
    {
        $request = $this->getPagesPageIdIncidentsIncidentIdSubscribersRequest($page_id, $incident_id, $page, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Subscriber[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Subscriber[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Subscriber[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Subscriber[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Subscriber[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPagesPageIdIncidentsIncidentIdSubscribersAsync
     *
     * Get a list of incident subscribers
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagesPageIdIncidentsIncidentIdSubscribersAsync($page_id, $incident_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribers'][0])
    {
        return $this->getPagesPageIdIncidentsIncidentIdSubscribersAsyncWithHttpInfo($page_id, $incident_id, $page, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPagesPageIdIncidentsIncidentIdSubscribersAsyncWithHttpInfo
     *
     * Get a list of incident subscribers
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagesPageIdIncidentsIncidentIdSubscribersAsyncWithHttpInfo($page_id, $incident_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Subscriber[]';
        $request = $this->getPagesPageIdIncidentsIncidentIdSubscribersRequest($page_id, $incident_id, $page, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPagesPageIdIncidentsIncidentIdSubscribers'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPagesPageIdIncidentsIncidentIdSubscribersRequest($page_id, $incident_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribers'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling getPagesPageIdIncidentsIncidentIdSubscribers'
            );
        }

        // verify the required parameter 'incident_id' is set
        if ($incident_id === null || (is_array($incident_id) && count($incident_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incident_id when calling getPagesPageIdIncidentsIncidentIdSubscribers'
            );
        }




        $resourcePath = '/pages/{page_id}/incidents/{incident_id}/subscribers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($incident_id !== null) {
            $resourcePath = str_replace(
                '{' . 'incident_id' . '}',
                ObjectSerializer::toPathValue($incident_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId
     *
     * Get an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Subscriber
     */
    public function getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'][0])
    {
        list($response) = $this->getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdWithHttpInfo($page_id, $incident_id, $subscriber_id, $contentType);
        return $response;
    }

    /**
     * Operation getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdWithHttpInfo
     *
     * Get an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Subscriber, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdWithHttpInfo($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'][0])
    {
        $request = $this->getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest($page_id, $incident_id, $subscriber_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Subscriber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Subscriber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Subscriber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Subscriber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Subscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsync
     *
     * Get an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsync($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'][0])
    {
        return $this->getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsyncWithHttpInfo($page_id, $incident_id, $subscriber_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsyncWithHttpInfo
     *
     * Get an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsyncWithHttpInfo($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Subscriber';
        $request = $this->getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest($page_id, $incident_id, $subscriber_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'
            );
        }

        // verify the required parameter 'incident_id' is set
        if ($incident_id === null || (is_array($incident_id) && count($incident_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incident_id when calling getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'
            );
        }

        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId'
            );
        }


        $resourcePath = '/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($incident_id !== null) {
            $resourcePath = str_replace(
                '{' . 'incident_id' . '}',
                ObjectSerializer::toPathValue($incident_id),
                $resourcePath
            );
        }
        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriber_id' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPagesPageIdIncidentsIncidentIdSubscribers
     *
     * Create an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdIncidentsIncidentIdSubscribers $post_pages_page_id_incidents_incident_id_subscribers post_pages_page_id_incidents_incident_id_subscribers (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Subscriber|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function postPagesPageIdIncidentsIncidentIdSubscribers($page_id, $incident_id, $post_pages_page_id_incidents_incident_id_subscribers, string $contentType = self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribers'][0])
    {
        list($response) = $this->postPagesPageIdIncidentsIncidentIdSubscribersWithHttpInfo($page_id, $incident_id, $post_pages_page_id_incidents_incident_id_subscribers, $contentType);
        return $response;
    }

    /**
     * Operation postPagesPageIdIncidentsIncidentIdSubscribersWithHttpInfo
     *
     * Create an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdIncidentsIncidentIdSubscribers $post_pages_page_id_incidents_incident_id_subscribers (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Subscriber|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPagesPageIdIncidentsIncidentIdSubscribersWithHttpInfo($page_id, $incident_id, $post_pages_page_id_incidents_incident_id_subscribers, string $contentType = self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribers'][0])
    {
        $request = $this->postPagesPageIdIncidentsIncidentIdSubscribersRequest($page_id, $incident_id, $post_pages_page_id_incidents_incident_id_subscribers, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Subscriber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Subscriber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Subscriber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Subscriber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Subscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postPagesPageIdIncidentsIncidentIdSubscribersAsync
     *
     * Create an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdIncidentsIncidentIdSubscribers $post_pages_page_id_incidents_incident_id_subscribers (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPagesPageIdIncidentsIncidentIdSubscribersAsync($page_id, $incident_id, $post_pages_page_id_incidents_incident_id_subscribers, string $contentType = self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribers'][0])
    {
        return $this->postPagesPageIdIncidentsIncidentIdSubscribersAsyncWithHttpInfo($page_id, $incident_id, $post_pages_page_id_incidents_incident_id_subscribers, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPagesPageIdIncidentsIncidentIdSubscribersAsyncWithHttpInfo
     *
     * Create an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdIncidentsIncidentIdSubscribers $post_pages_page_id_incidents_incident_id_subscribers (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPagesPageIdIncidentsIncidentIdSubscribersAsyncWithHttpInfo($page_id, $incident_id, $post_pages_page_id_incidents_incident_id_subscribers, string $contentType = self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Subscriber';
        $request = $this->postPagesPageIdIncidentsIncidentIdSubscribersRequest($page_id, $incident_id, $post_pages_page_id_incidents_incident_id_subscribers, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPagesPageIdIncidentsIncidentIdSubscribers'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdIncidentsIncidentIdSubscribers $post_pages_page_id_incidents_incident_id_subscribers (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postPagesPageIdIncidentsIncidentIdSubscribersRequest($page_id, $incident_id, $post_pages_page_id_incidents_incident_id_subscribers, string $contentType = self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribers'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling postPagesPageIdIncidentsIncidentIdSubscribers'
            );
        }

        // verify the required parameter 'incident_id' is set
        if ($incident_id === null || (is_array($incident_id) && count($incident_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incident_id when calling postPagesPageIdIncidentsIncidentIdSubscribers'
            );
        }

        // verify the required parameter 'post_pages_page_id_incidents_incident_id_subscribers' is set
        if ($post_pages_page_id_incidents_incident_id_subscribers === null || (is_array($post_pages_page_id_incidents_incident_id_subscribers) && count($post_pages_page_id_incidents_incident_id_subscribers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_pages_page_id_incidents_incident_id_subscribers when calling postPagesPageIdIncidentsIncidentIdSubscribers'
            );
        }


        $resourcePath = '/pages/{page_id}/incidents/{incident_id}/subscribers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($incident_id !== null) {
            $resourcePath = str_replace(
                '{' . 'incident_id' . '}',
                ObjectSerializer::toPathValue($incident_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_pages_page_id_incidents_incident_id_subscribers)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_pages_page_id_incidents_incident_id_subscribers));
            } else {
                $httpBody = $post_pages_page_id_incidents_incident_id_subscribers;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation
     *
     * Resend confirmation to an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'][0])
    {
        $this->postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationWithHttpInfo($page_id, $incident_id, $subscriber_id, $contentType);
    }

    /**
     * Operation postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationWithHttpInfo
     *
     * Resend confirmation to an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationWithHttpInfo($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'][0])
    {
        $request = $this->postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationRequest($page_id, $incident_id, $subscriber_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationAsync
     *
     * Resend confirmation to an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationAsync($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'][0])
    {
        return $this->postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationAsyncWithHttpInfo($page_id, $incident_id, $subscriber_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationAsyncWithHttpInfo
     *
     * Resend confirmation to an incident subscriber
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationAsyncWithHttpInfo($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'][0])
    {
        $returnType = '';
        $request = $this->postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationRequest($page_id, $incident_id, $subscriber_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $incident_id Incident Identifier (required)
     * @param  string $subscriber_id Subscriber Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationRequest($page_id, $incident_id, $subscriber_id, string $contentType = self::contentTypes['postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'
            );
        }

        // verify the required parameter 'incident_id' is set
        if ($incident_id === null || (is_array($incident_id) && count($incident_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incident_id when calling postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'
            );
        }

        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation'
            );
        }


        $resourcePath = '/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}/resend_confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($incident_id !== null) {
            $resourcePath = str_replace(
                '{' . 'incident_id' . '}',
                ObjectSerializer::toPathValue($incident_id),
                $resourcePath
            );
        }
        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriber_id' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
