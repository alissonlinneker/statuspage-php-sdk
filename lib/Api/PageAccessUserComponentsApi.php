<?php
/**
 * PageAccessUserComponentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statuspage API
 *
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PageAccessUserComponentsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PageAccessUserComponentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deletePagesPageIdPageAccessUsersPageAccessUserIdComponents' => [
            'application/json',
        ],
        'deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId' => [
            'application/json',
        ],
        'getPagesPageIdPageAccessUsersPageAccessUserIdComponents' => [
            'application/json',
        ],
        'patchPagesPageIdPageAccessUsersPageAccessUserIdComponents' => [
            'application/json',
        ],
        'postPagesPageIdPageAccessUsersPageAccessUserIdComponents' => [
            'application/json',
        ],
        'putPagesPageIdPageAccessUsersPageAccessUserIdComponents' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deletePagesPageIdPageAccessUsersPageAccessUserIdComponents
     *
     * Remove components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents $delete_pages_page_id_page_access_users_page_access_user_id_components delete_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PageAccessUser|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function deletePagesPageIdPageAccessUsersPageAccessUserIdComponents($page_id, $page_access_user_id, $delete_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        list($response) = $this->deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo($page_id, $page_access_user_id, $delete_pages_page_id_page_access_users_page_access_user_id_components, $contentType);
        return $response;
    }

    /**
     * Operation deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo
     *
     * Remove components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents $delete_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PageAccessUser|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo($page_id, $page_access_user_id, $delete_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        $request = $this->deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $delete_pages_page_id_page_access_users_page_access_user_id_components, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PageAccessUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PageAccessUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PageAccessUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PageAccessUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PageAccessUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync
     *
     * Remove components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents $delete_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync($page_id, $page_access_user_id, $delete_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        return $this->deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo($page_id, $page_access_user_id, $delete_pages_page_id_page_access_users_page_access_user_id_components, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo
     *
     * Remove components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents $delete_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo($page_id, $page_access_user_id, $delete_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PageAccessUser';
        $request = $this->deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $delete_pages_page_id_page_access_users_page_access_user_id_components, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents $delete_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $delete_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }

        // verify the required parameter 'page_access_user_id' is set
        if ($page_access_user_id === null || (is_array($page_access_user_id) && count($page_access_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_access_user_id when calling deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }

        // verify the required parameter 'delete_pages_page_id_page_access_users_page_access_user_id_components' is set
        if ($delete_pages_page_id_page_access_users_page_access_user_id_components === null || (is_array($delete_pages_page_id_page_access_users_page_access_user_id_components) && count($delete_pages_page_id_page_access_users_page_access_user_id_components) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delete_pages_page_id_page_access_users_page_access_user_id_components when calling deletePagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }


        $resourcePath = '/pages/{page_id}/page_access_users/{page_access_user_id}/components';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($page_access_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_access_user_id' . '}',
                ObjectSerializer::toPathValue($page_access_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($delete_pages_page_id_page_access_users_page_access_user_id_components)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($delete_pages_page_id_page_access_users_page_access_user_id_components));
            } else {
                $httpBody = $delete_pages_page_id_page_access_users_page_access_user_id_components;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId
     *
     * Remove component for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  string $component_id Component identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PageAccessUser|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId($page_id, $page_access_user_id, $component_id, string $contentType = self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'][0])
    {
        list($response) = $this->deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdWithHttpInfo($page_id, $page_access_user_id, $component_id, $contentType);
        return $response;
    }

    /**
     * Operation deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdWithHttpInfo
     *
     * Remove component for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  string $component_id Component identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PageAccessUser|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdWithHttpInfo($page_id, $page_access_user_id, $component_id, string $contentType = self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'][0])
    {
        $request = $this->deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdRequest($page_id, $page_access_user_id, $component_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PageAccessUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PageAccessUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PageAccessUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PageAccessUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PageAccessUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdAsync
     *
     * Remove component for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  string $component_id Component identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdAsync($page_id, $page_access_user_id, $component_id, string $contentType = self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'][0])
    {
        return $this->deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdAsyncWithHttpInfo($page_id, $page_access_user_id, $component_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdAsyncWithHttpInfo
     *
     * Remove component for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  string $component_id Component identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdAsyncWithHttpInfo($page_id, $page_access_user_id, $component_id, string $contentType = self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PageAccessUser';
        $request = $this->deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdRequest($page_id, $page_access_user_id, $component_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  string $component_id Component identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdRequest($page_id, $page_access_user_id, $component_id, string $contentType = self::contentTypes['deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'
            );
        }

        // verify the required parameter 'page_access_user_id' is set
        if ($page_access_user_id === null || (is_array($page_access_user_id) && count($page_access_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_access_user_id when calling deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'
            );
        }

        // verify the required parameter 'component_id' is set
        if ($component_id === null || (is_array($component_id) && count($component_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $component_id when calling deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId'
            );
        }


        $resourcePath = '/pages/{page_id}/page_access_users/{page_access_user_id}/components/{component_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($page_access_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_access_user_id' . '}',
                ObjectSerializer::toPathValue($page_access_user_id),
                $resourcePath
            );
        }
        // path params
        if ($component_id !== null) {
            $resourcePath = str_replace(
                '{' . 'component_id' . '}',
                ObjectSerializer::toPathValue($component_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPagesPageIdPageAccessUsersPageAccessUserIdComponents
     *
     * Get components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Component[]|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function getPagesPageIdPageAccessUsersPageAccessUserIdComponents($page_id, $page_access_user_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        list($response) = $this->getPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo($page_id, $page_access_user_id, $page, $per_page, $contentType);
        return $response;
    }

    /**
     * Operation getPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo
     *
     * Get components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Component[]|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo($page_id, $page_access_user_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        $request = $this->getPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $page, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Component[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Component[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Component[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Component[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Component[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync
     *
     * Get components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync($page_id, $page_access_user_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        return $this->getPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo($page_id, $page_access_user_id, $page, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo
     *
     * Get components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo($page_id, $page_access_user_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Component[]';
        $request = $this->getPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $page, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPagesPageIdPageAccessUsersPageAccessUserIdComponents'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  int $page Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  int $per_page Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $page = null, $per_page = null, string $contentType = self::contentTypes['getPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling getPagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }

        // verify the required parameter 'page_access_user_id' is set
        if ($page_access_user_id === null || (is_array($page_access_user_id) && count($page_access_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_access_user_id when calling getPagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }




        $resourcePath = '/pages/{page_id}/page_access_users/{page_access_user_id}/components';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($page_access_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_access_user_id' . '}',
                ObjectSerializer::toPathValue($page_access_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchPagesPageIdPageAccessUsersPageAccessUserIdComponents
     *
     * Add components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents $patch_pages_page_id_page_access_users_page_access_user_id_components patch_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PageAccessUser|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function patchPagesPageIdPageAccessUsersPageAccessUserIdComponents($page_id, $page_access_user_id, $patch_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        list($response) = $this->patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo($page_id, $page_access_user_id, $patch_pages_page_id_page_access_users_page_access_user_id_components, $contentType);
        return $response;
    }

    /**
     * Operation patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo
     *
     * Add components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents $patch_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PageAccessUser|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo($page_id, $page_access_user_id, $patch_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        $request = $this->patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $patch_pages_page_id_page_access_users_page_access_user_id_components, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PageAccessUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PageAccessUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PageAccessUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PageAccessUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PageAccessUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync
     *
     * Add components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents $patch_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync($page_id, $page_access_user_id, $patch_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        return $this->patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo($page_id, $page_access_user_id, $patch_pages_page_id_page_access_users_page_access_user_id_components, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo
     *
     * Add components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents $patch_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo($page_id, $page_access_user_id, $patch_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PageAccessUser';
        $request = $this->patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $patch_pages_page_id_page_access_users_page_access_user_id_components, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents $patch_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $patch_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }

        // verify the required parameter 'page_access_user_id' is set
        if ($page_access_user_id === null || (is_array($page_access_user_id) && count($page_access_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_access_user_id when calling patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }

        // verify the required parameter 'patch_pages_page_id_page_access_users_page_access_user_id_components' is set
        if ($patch_pages_page_id_page_access_users_page_access_user_id_components === null || (is_array($patch_pages_page_id_page_access_users_page_access_user_id_components) && count($patch_pages_page_id_page_access_users_page_access_user_id_components) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patch_pages_page_id_page_access_users_page_access_user_id_components when calling patchPagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }


        $resourcePath = '/pages/{page_id}/page_access_users/{page_access_user_id}/components';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($page_access_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_access_user_id' . '}',
                ObjectSerializer::toPathValue($page_access_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_pages_page_id_page_access_users_page_access_user_id_components)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_pages_page_id_page_access_users_page_access_user_id_components));
            } else {
                $httpBody = $patch_pages_page_id_page_access_users_page_access_user_id_components;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPagesPageIdPageAccessUsersPageAccessUserIdComponents
     *
     * Replace components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdPageAccessUsersPageAccessUserIdComponents $post_pages_page_id_page_access_users_page_access_user_id_components post_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PageAccessUser|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function postPagesPageIdPageAccessUsersPageAccessUserIdComponents($page_id, $page_access_user_id, $post_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['postPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        list($response) = $this->postPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo($page_id, $page_access_user_id, $post_pages_page_id_page_access_users_page_access_user_id_components, $contentType);
        return $response;
    }

    /**
     * Operation postPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo
     *
     * Replace components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdPageAccessUsersPageAccessUserIdComponents $post_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PageAccessUser|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo($page_id, $page_access_user_id, $post_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['postPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        $request = $this->postPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $post_pages_page_id_page_access_users_page_access_user_id_components, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\PageAccessUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PageAccessUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PageAccessUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PageAccessUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PageAccessUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync
     *
     * Replace components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdPageAccessUsersPageAccessUserIdComponents $post_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync($page_id, $page_access_user_id, $post_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['postPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        return $this->postPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo($page_id, $page_access_user_id, $post_pages_page_id_page_access_users_page_access_user_id_components, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo
     *
     * Replace components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdPageAccessUsersPageAccessUserIdComponents $post_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo($page_id, $page_access_user_id, $post_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['postPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PageAccessUser';
        $request = $this->postPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $post_pages_page_id_page_access_users_page_access_user_id_components, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPagesPageIdPageAccessUsersPageAccessUserIdComponents'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PostPagesPageIdPageAccessUsersPageAccessUserIdComponents $post_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $post_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['postPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling postPagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }

        // verify the required parameter 'page_access_user_id' is set
        if ($page_access_user_id === null || (is_array($page_access_user_id) && count($page_access_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_access_user_id when calling postPagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }

        // verify the required parameter 'post_pages_page_id_page_access_users_page_access_user_id_components' is set
        if ($post_pages_page_id_page_access_users_page_access_user_id_components === null || (is_array($post_pages_page_id_page_access_users_page_access_user_id_components) && count($post_pages_page_id_page_access_users_page_access_user_id_components) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_pages_page_id_page_access_users_page_access_user_id_components when calling postPagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }


        $resourcePath = '/pages/{page_id}/page_access_users/{page_access_user_id}/components';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($page_access_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_access_user_id' . '}',
                ObjectSerializer::toPathValue($page_access_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_pages_page_id_page_access_users_page_access_user_id_components)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_pages_page_id_page_access_users_page_access_user_id_components));
            } else {
                $httpBody = $post_pages_page_id_page_access_users_page_access_user_id_components;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putPagesPageIdPageAccessUsersPageAccessUserIdComponents
     *
     * Add components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdPageAccessUsersPageAccessUserIdComponents $put_pages_page_id_page_access_users_page_access_user_id_components put_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PageAccessUser|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity
     */
    public function putPagesPageIdPageAccessUsersPageAccessUserIdComponents($page_id, $page_access_user_id, $put_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['putPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        list($response) = $this->putPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo($page_id, $page_access_user_id, $put_pages_page_id_page_access_users_page_access_user_id_components, $contentType);
        return $response;
    }

    /**
     * Operation putPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo
     *
     * Add components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdPageAccessUsersPageAccessUserIdComponents $put_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PageAccessUser|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity|\OpenAPI\Client\Model\ErrorEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo($page_id, $page_access_user_id, $put_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['putPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        $request = $this->putPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $put_pages_page_id_page_access_users_page_access_user_id_components, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PageAccessUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PageAccessUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PageAccessUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PageAccessUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PageAccessUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync
     *
     * Add components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdPageAccessUsersPageAccessUserIdComponents $put_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync($page_id, $page_access_user_id, $put_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['putPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        return $this->putPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo($page_id, $page_access_user_id, $put_pages_page_id_page_access_users_page_access_user_id_components, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo
     *
     * Add components for page access user
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdPageAccessUsersPageAccessUserIdComponents $put_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsyncWithHttpInfo($page_id, $page_access_user_id, $put_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['putPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PageAccessUser';
        $request = $this->putPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $put_pages_page_id_page_access_users_page_access_user_id_components, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putPagesPageIdPageAccessUsersPageAccessUserIdComponents'
     *
     * @param  string $page_id Page identifier (required)
     * @param  string $page_access_user_id Page Access User Identifier (required)
     * @param  \OpenAPI\Client\Model\PutPagesPageIdPageAccessUsersPageAccessUserIdComponents $put_pages_page_id_page_access_users_page_access_user_id_components (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPagesPageIdPageAccessUsersPageAccessUserIdComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest($page_id, $page_access_user_id, $put_pages_page_id_page_access_users_page_access_user_id_components, string $contentType = self::contentTypes['putPagesPageIdPageAccessUsersPageAccessUserIdComponents'][0])
    {

        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling putPagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }

        // verify the required parameter 'page_access_user_id' is set
        if ($page_access_user_id === null || (is_array($page_access_user_id) && count($page_access_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_access_user_id when calling putPagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }

        // verify the required parameter 'put_pages_page_id_page_access_users_page_access_user_id_components' is set
        if ($put_pages_page_id_page_access_users_page_access_user_id_components === null || (is_array($put_pages_page_id_page_access_users_page_access_user_id_components) && count($put_pages_page_id_page_access_users_page_access_user_id_components) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_pages_page_id_page_access_users_page_access_user_id_components when calling putPagesPageIdPageAccessUsersPageAccessUserIdComponents'
            );
        }


        $resourcePath = '/pages/{page_id}/page_access_users/{page_access_user_id}/components';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_id' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }
        // path params
        if ($page_access_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'page_access_user_id' . '}',
                ObjectSerializer::toPathValue($page_access_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_pages_page_id_page_access_users_page_access_user_id_components)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_pages_page_id_page_access_users_page_access_user_id_components));
            } else {
                $httpBody = $put_pages_page_id_page_access_users_page_access_user_id_components;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
